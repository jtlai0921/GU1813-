%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Fairy) ()
%%Title: (floraltype.eps)
%%CreationDate: 12/19/2008 6:15 PM
%%BoundingBox: 0 0 842 596
%%HiResBoundingBox: 0 0 841.8896 595.2754
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 421.5 296.7754 421.5 296.7754
%AI3_TileBox: 133.0649 -87.3828 708.9453 713.4976
%AI3_DocumentPreview: Header
%AI5_ArtSize: 841.8898 595.2756
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -75 689.2754 1 1014 915 2 0 0 44 79 0 0
%AI5_OpenViewLayers: 33
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
3 Bn
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 1)
(Radial Gradient 1) 1 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 86)
(Unnamed gradient 86) 1 2 Bd
[
<
0D0D0D0D0C0C0C0C0D0D0D0C0C0C0C0D0D0D0D0C0C0C0C0C0D0D0C0C0C0C0C0C0C0C0B0B0B0B0B0B
0B0A0A0B0B0B0B0B0C0B0B0B0B0C0C0C0C0B0B0B0B0C0C0C0C0B0B0B0C0C0C0C0B0B0B0C0C0C0C0C
0B0B0B0B0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0B0B0B0A0A0A0A0B0B0B0B0B0A0A0A0A0A0B
0B0B0B0B0A0A0A0B0B0B0B0B0B0A0B0B0B0B0B0B
>
<
B2B1B0AEADACABA9A8A6A5A4A2A1A09E9D9C9A999796949391908F8D8C8A89878684858381807E7C
7B7A787776747371706F6D6B6A69676666646362605F5D5C5B5A58575554535352504F4E4C4B4948
474646444342403F3E3D3B3B3A38373533333131302E2D2B2A2B29282625232321201F1D1C1C1B19
1816161514131311100F0F0D0C0C0B0909080707
>
<
E9E8E8E6E5E4E2E2E1E1E0DEDEDDDDDCDCDBDAD9D8D8D7D6D6D5D5D4D3D3D1D1D0D0CECDCDCBCBCA
CBC9C8C8C8C8C7C7C6C5C5C4C5C4C4C3C2C2C1C1C0C0BFBFBEBDBDBCBCBBBCBBBABABAB9B8B8B7B8
B6B7B6B6B5B5B4B4B3B2B2B1B1B0B0AFAFAEAEADADACACACACABABAAAAA9AAA8A9A8A8A7A7A6A6A5
A5A4A4A5A4A4A3A3A2A3A2A2A2A1A1A0A0A1A0A0
>
0
<
E7E7E7E7E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEBEBEBEBEBEBEBEBECECECECECEC
ECEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F1F1F1F1F1F1F1F1
F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6
F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8
>
<
6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F8F9091929394
95969798999A9B9C9D9E9FA0A1A2A3A4A4A5A6A7A8A9AAABACADAEAFB0B1B2B2B3B4B5B6B7B8B9BA
BBBCBCBDBEBFC0C1C2C3C4C4C5C6C7C8C9CACBCBCCCDCECFD0D0D1D2D3D4D5D5D6D7D8D9DADADBDC
DDDEDEDFE0E1E1E2E3E4E4E5E6E6E7E8E8E9EAEA
>
<
343535363637383839393A3B3B3C3C3D3D3E3F3F40404142424343444545464647474849494A4A4B
4B4C4D4D4E4E4F4F50515152525353545555565657575858595A5A5B5B5C5C5D5D5E5E5F60606161
6262636364646565666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576
76777777787879797A7A7B7B7B7C7C7D7D7D7E7E
>
4 %_Br
[
0.05098 0.698039 0.913725 0 0.905882 0.431373 0.203922 2 46.0674 0 %_BS
%_0.05098 0.698039 0.913725 0 0.905882 0.431373 0.203922 2 46.0674 0 Bs
0.043137 0.027451 0.627451 0 0.972549 0.917647 0.494118 2 50 100 %_BS
%_0.043137 0.027451 0.627451 0 0.972549 0.917647 0.494118 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -
( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 3 pt. ) -
(Flat/ Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe Calligr) -
(aphic Brush Tool/ 3 pt. Round/ Adobe Calligraphic Brush Tool/ ) -
(7 pt. Round/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 pt. Oval)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Flat)
(1 3 3 9 9 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Round)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Oval)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 pt. Round)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 1 1 1 Xa
(White)
Pc
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
(Black)
Pc
Bb
2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 1)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 1)
Pc
0 g
(K=100)
Pc
0.100006 g
(K=90)
Pc
0.200012 g
(K=80)
Pc
0.300003 g
(K=70)
Pc
0.400009 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.600006 g
(K=40)
Pc
0.700012 g
(K=30)
Pc
0.800003 g
(K=20)
Pc
0.900009 g
(K=10)
Pc
0.950012 g
(K=5)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 0 1 0 0 1 0 79 128 255 0 50 Lb
(background) Ln
1 A
0 A
1 Ap
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 4 M []0 d0 XR
841.8896 0 m
0 0 L
0 595.2754 L
841.8896 595.2754 L
841.8896 0 L
f
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 0 1 0 0 1 1 255 79 79 0 50 Lb
(love) Ln
1 A
0 A
u
0 Ap
0 O
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
0 J 0 j 1 w 4 M []0 d0 XR
497.6934 342.1084 m
497.6934 343.5479 496.1357 344.9644 494.7539 345.9019 c
493.7471 346.5859 492.6973 346.9155 491.5439 346.9155 c
487.0469 346.9155 481.4336 342.3022 476.1563 334.2402 C
492.4766 334.2402 L
497.6934 337.0469 497.6934 342.1084 v
f
487.3486 366.5381 m
492.5244 366.5381 497.8105 365.3281 503.0635 362.9385 c
510.8018 359.4229 515.373 349.7935 513.4717 341.0151 c
512.9004 338.3726 511.792 336.1016 510.252 334.2402 C
524.9248 334.2402 L
524.9248 367.0654 L
422.6357 367.0654 L
422.6357 289.8818 L
435.3926 325.0938 456.8779 366.5381 487.3486 366.5381 c
f
566.5293 291.1113 m
550.2119 292.542 555.46 273.5527 V
555.6396 278.6455 559.124 279.8896 v
565.6914 282.2373 575.9141 275.4619 561.9482 259.0488 c
542.1602 235.793 470.3447 244.5459 Y
470.3447 275.8438 L
501.2607 275.8438 L
501.2607 303.3242 L
467.6729 303.3242 L
467.6729 317.1421 L
465.541 311.5117 463.6797 305.2339 462.2578 298.4238 c
457.4531 275.4111 449.4648 244.9648 436.7061 214.7754 C
450.8682 214.7754 471.791 214.7754 480.2676 214.7754 c
493.6279 214.7754 577.1904 210.2852 583.7031 258.668 c
586.624 280.3555 578.3613 291.1113 566.5293 291.1113 C
f
*u
1 D
350.4375 315.9185 m
355.458 315.9185 L
383.9282 315.9185 L
389.7017 328.6611 393.1167 344.3545 393.1167 361.3403 c
393.1167 403.9346 371.6904 438.4634 345.2593 438.4634 c
318.8296 438.4634 297.4028 403.9346 297.4028 361.3403 c
297.4028 318.7461 318.8296 284.2168 345.2593 284.2168 c
350.8027 284.2168 356.1201 285.7529 361.0718 288.5469 C
352.2559 311.2402 L
350.4375 315.9185 L
f
0 D
324.502 361.3403 m
324.502 379.8154 333.7959 394.792 345.2593 394.792 c
356.7236 394.792 366.0176 379.8154 366.0176 361.3403 c
366.0176 342.8647 356.7236 327.8877 345.2593 327.8877 c
333.7959 327.8877 324.502 342.8647 324.502 361.3403 c
f
*U
396.9341 368.1255 m
395.9551 386.9014 390.9351 404.3975 382.5029 417.9893 c
372.7539 433.7124 359.5249 442.4727 345.2598 442.4727 c
330.9956 442.4727 317.7642 433.7124 308.0127 417.9912 c
298.5752 402.7715 293.396 382.6641 293.396 361.3408 c
293.396 340.0161 298.5752 319.9097 308.0127 304.6938 c
314.6196 294.0469 322.8081 286.6104 331.8442 282.9043 C
279.8857 282.9043 L
279.8857 372.2188 L
278.7417 372.2188 L
278.7417 281.7607 L
350.3047 281.7607 L
350.3047 241.6855 L
242.6328 241.6855 L
242.6328 240.5391 L
351.4512 240.5391 L
351.4512 282.9043 L
335.1797 282.9043 L
325.2886 285.9941 316.2129 293.6553 308.9854 305.2959 c
299.6855 320.2881 294.5391 340.2007 294.5391 361.3408 c
294.5391 382.478 299.6855 402.3945 308.9854 417.3867 c
318.6143 432.8892 331.4922 441.3267 345.2598 441.3267 c
359.0259 441.3267 371.9048 432.8892 381.5313 417.3867 c
390.0054 403.7324 395.0132 385.9893 395.8428 366.9619 C
395.6514 365.5874 393.1934 346.5576 403.3955 347.0879 c
409.2866 347.394 398.7881 357.248 396.9341 368.1255 C
f
*u
1 D
566.7334 217.5762 m
568.0967 217.5762 569.2256 217.5645 569.7695 217.5645 c
574.2842 217.5674 579.6494 216.2041 583.082 214.75 c
590.7168 211.5283 596.1426 206.5752 601.6338 200.2988 c
605.6221 195.7412 608.8193 190.3818 608.8145 184.4697 c
608.8145 183.5303 608.7354 182.5713 608.5645 181.5898 c
607.3564 174.8496 602.1709 172.0713 595.0234 171.8076 c
594.9688 171.8047 594.9072 171.8047 594.8506 171.8047 c
592.9922 171.8008 590.791 172.7432 589.0879 174.3125 c
587.3818 175.8818 586.1846 178.0439 586.1865 180.4463 c
586.1865 181.3037 586.3359 182.1953 586.6787 183.1152 c
587.876 186.3877 591.0928 188.1797 593.8613 188.1777 c
596.3613 188.1348 598.3516 186.8525 598.4902 183.7949 C
598.4902 183.7871 598.4902 183.7627 598.4902 183.7363 c
598.498 183.1416 598.1514 182.127 597.54 181.335 c
596.9248 180.5313 596.0977 179.96 595.1494 179.9658 c
595.0703 179.9658 594.9912 179.9727 594.9092 179.9785 C
595.6426 180.4102 596.1416 181.1992 596.1416 182.1123 c
596.1416 183.4834 595.0293 184.5938 593.6592 184.5938 c
592.29 184.5938 591.1777 183.4834 591.1777 182.1123 c
591.1777 181.5811 591.3486 181.0928 591.6318 180.6885 C
591.6074 180.665 L
591.6602 180.6143 591.7109 180.5801 591.7627 180.5313 C
591.9365 180.3213 592.1387 180.1416 592.374 180.001 C
593.3291 179.2588 594.2676 178.9082 595.1494 178.9082 c
597.9482 178.9932 599.5068 181.9492 599.5479 183.7363 c
599.5479 183.7627 599.5479 183.7891 599.5479 183.8135 c
599.4492 187.4512 596.7471 189.2764 593.8613 189.2344 c
590.667 189.2285 587.0752 187.2158 585.6875 183.4824 c
585.3047 182.4512 585.1289 181.4268 585.1289 180.4463 c
585.1748 174.915 590.4814 170.7783 594.8506 170.749 c
594.918 170.749 594.9873 170.749 595.0498 170.7529 c
602.418 170.9473 608.335 174.085 609.6064 181.4102 c
609.7842 182.4492 609.8721 183.4678 609.8721 184.4697 c
609.8672 190.7783 606.4941 196.3447 602.4268 200.9951 c
596.8984 207.3203 591.3291 212.4189 583.4932 215.7246 c
580.7305 216.8877 576.8574 217.9697 573.0615 218.4092 C
573.0801 218.4131 573.0996 218.416 573.1191 218.4219 C
573.3086 218.4258 573.498 218.4316 573.7061 218.4316 c
576.9941 218.4316 582.0234 217.8516 588.2559 215.2969 c
603.71 209.0098 617.8447 191.54 619.3975 181.9521 c
620.4609 175.7959 626.8936 170.9688 632.6133 170.9375 c
632.6201 170.9375 632.626 170.9375 632.6338 170.9375 c
634.9414 170.9375 637.1719 171.7734 638.7793 173.6895 c
640.3936 175.6045 641.3672 178.5371 641.3652 182.6563 c
641.3652 184.4951 641.1748 186.5771 640.7539 188.9209 c
637.4854 206.7607 621.4434 214.3887 608.9375 217.6592 C
615.3779 216.3906 622.3086 214.4131 628.5156 211.332 C
628.9814 211.0322 629.79 210.4717 630.8271 209.6143 c
635.8359 205.4609 645.9102 194.5352 645.916 173.3643 c
645.9141 166.4688 647.6855 161.6934 650.4111 158.6416 c
653.1309 155.5938 656.7744 154.3105 660.3545 154.3105 c
660.3623 154.3105 660.3691 154.3105 660.376 154.3105 c
666.7803 154.3291 673.1357 158.2861 674.3389 163.7021 c
674.9092 166.3691 675.6631 169.7393 675.6631 173.5557 c
675.6836 183.8799 670.0342 197.1895 641.4727 208.6738 C
635.833 210.6797 L
639.1191 210.2422 643.293 209.8584 647.873 209.8574 c
647.8867 209.8574 647.9004 209.8574 647.915 209.8574 c
661.1777 209.8564 677.9541 213.1113 685.8496 227.7578 C
685.8691 227.7744 L
693.5313 239.6787 687.9971 243.877 v
682.4639 248.0771 682.75 238.0566 683.8955 233.9531 c
684.9961 230.0117 683.3789 225.9844 683.252 225.6729 C
675.1484 213.8008 660.1641 211.0127 647.873 211.0039 c
641.7354 211.0039 636.3418 211.7012 632.8809 212.2852 C
636.2158 211.9443 636.8975 212.0615 638.999 212.0576 c
649.5137 212.0576 656.1133 213.9932 660.1348 217.0391 c
664.1631 220.0869 665.4863 224.2559 665.4766 228.3721 c
665.4121 233.4658 659.5713 236.751 652.0996 236.7607 c
646.376 236.7607 639.5625 234.832 633.2168 230.1221 c
625.5498 224.4053 612.6104 222.3906 602.4072 221.7656 C
597.0693 222.1357 591.6328 222.5801 586.5898 222.8398 C
596.1104 226.7949 606.8105 232.5576 618.4756 238.8359 c
623.6426 241.6191 628.9854 244.4922 634.4668 247.3447 c
659.1885 260.2383 688.1182 273.3711 715.4434 273.3652 c
730.9658 273.3672 744.8262 270.3877 754.4072 265.0449 c
765.8525 258.6191 771.3301 249.5459 771.376 236.9854 C
771.3682 236.9473 771.376 236.9033 771.376 236.8945 c
771.373 236.1543 771.3506 235.3594 771.2998 234.4688 c
771.1289 231.3887 770.2422 223.4629 765.9941 216.8828 c
761.1475 209.4297 753.8594 205.8262 743.3389 205.7861 c
740.1689 205.7861 736.668 206.1533 732.9551 206.876 c
718.6816 209.7764 712.0342 215.8428 711.8945 225.6191 C
711.873 225.6855 L
711.8926 225.6855 L
711.875 231.7168 714.7959 237.4375 715.2861 238.1416 C
716.8086 240.4922 722.6445 246.7324 730.3721 246.6992 c
733.7031 246.6992 737.1963 245.6113 740.7539 243.4277 c
741.5029 242.9639 742.1787 242.4814 742.7988 241.9805 C
743.1641 241.7158 744.9189 239.1055 744.9277 236.7412 C
744.9209 236.6572 744.9277 236.6309 Y
744.917 235.3701 744.5029 234.4463 743.582 233.6123 c
740.4688 230.8457 738.877 228.2744 738.7939 225.5449 C
738.7871 225.4785 738.79 225.4023 738.79 225.3486 c
738.7871 223.2676 739.7363 221.291 741.5049 219.5264 c
743.0391 217.9961 745.3213 217.1533 747.7773 217.1533 c
749.9805 217.1533 752.2734 217.8867 754.0332 219.4492 c
755.7959 221.0117 756.9902 223.417 756.9863 226.6074 c
756.9766 235.4619 753.6484 243.7471 748.3203 247.8359 C
747.3213 248.6924 746.1787 249.5156 744.9551 250.2578 c
740.1475 253.207 735.2393 254.7188 730.376 254.7188 C
730.3525 254.7168 730.3311 254.7158 730.3135 254.7139 C
717.0088 254.6045 709.457 243.8291 708.5938 242.5488 c
706.9463 240.0078 703.915 233.3486 703.8828 225.6318 C
703.8789 225.5615 703.8809 225.4727 703.8809 225.3945 c
703.8271 218.8281 706.8438 203.6191 731.4092 199.0098 c
735.6367 198.1885 739.6709 197.7725 743.4072 197.7705 C
743.5039 197.7725 L
743.5039 197.7705 L
743.5127 197.7705 743.5264 197.7705 743.5342 197.7705 c
759.8193 197.7686 768.4521 205.8105 772.7305 212.5449 c
777.8174 220.4766 779.0234 229.3848 779.3066 234.0127 c
779.3633 235.0254 779.3887 236.0283 779.3887 236.9912 c
779.3887 237.0303 779.3887 237.0439 779.3887 237.0859 c
779.4043 252.3057 772.0645 264.4668 758.3096 272.0479 c
744.4014 279.7676 727.2939 281.3711 715.3799 281.3789 c
686.3271 281.3594 656.2998 267.7344 630.7627 254.4531 c
628.5605 253.3027 626.3975 252.1533 624.2451 251.0068 C
636.2822 258.0176 648.29 265.4258 658.8496 272.3369 c
675.7617 283.4111 700.2441 292.4531 724.1172 292.4492 c
742.6299 292.4443 760.7422 287.0195 774.8135 272.957 C
775.2207 272.2207 783.8154 256.8252 790.2646 257.4063 c
796.8711 258.001 798.875 265.2998 791.1465 267.876 c
783.416 270.4521 779.4482 271.3643 773.3271 275.9717 C
773.3564 275.9141 L
759.3828 288.626 741.8721 293.5977 724.1172 293.5947 c
699.9531 293.5898 675.3174 284.4805 658.2217 273.2939 c
631.9941 256.127 596.7646 235.8516 574.5254 226.4004 C
585.0781 236.0928 594.0605 248.9785 596.5732 262.4678 C
597.1914 264.8125 598.1943 268.4805 599.1338 271.6543 C
599.1709 271.6553 L
599.1709 271.7803 L
599.9375 274.3604 600.6533 276.583 601.0732 277.4326 c
602.1914 279.752 605.2021 281.8467 608.2676 281.832 c
609.4082 281.832 610.5576 281.5527 611.6582 280.9023 c
613.4805 279.8242 614.501 277.9404 614.501 276.0479 c
614.499 274.6563 613.959 273.2637 612.7549 272.1338 c
611.9082 271.3525 611.1406 271.0879 610.4658 271.0859 c
609.6338 271.084 608.8682 271.5137 608.3008 272.123 c
608.1563 272.2783 608.0283 272.4453 607.917 272.6162 C
607.9727 272.6104 608.0254 272.5996 608.083 272.5996 c
608.9531 272.5996 609.6572 273.3037 609.6572 274.1748 c
609.6572 275.0439 608.9531 275.749 608.083 275.749 c
607.877 275.749 607.6826 275.7061 607.5029 275.6348 C
607.4902 275.6768 L
606.7217 275.4443 606.3408 274.6982 606.3633 274.0195 c
606.4014 272.2998 608.0537 270.0859 610.4658 270.0303 c
611.4365 270.0273 612.4834 270.4355 613.4717 271.3633 c
614.8906 272.6836 615.5605 274.3779 615.5586 276.0479 c
615.5586 278.3193 614.334 280.5449 612.1953 281.8125 c
610.9297 282.5635 609.5801 282.8887 608.2676 282.8887 c
605.6035 282.876 603.0928 281.585 601.4414 279.79 C
603.3281 283.8506 606.0908 288.4092 608.5625 292.1836 c
610.6074 295.3516 613.1055 300.3901 613.1191 304.5781 c
613.1455 307.1006 612.1074 309.4429 609.4414 310.4888 c
608.377 310.9146 607.3701 311.106 606.4297 311.106 c
601.2568 311.041 598.5625 305.606 597.666 303.1348 c
596.2773 299.207 595.9209 292.7891 595.915 286.7646 c
595.915 283.9561 595.998 281.2441 596.1035 278.9307 C
595.6094 280.793 594.9502 282.6445 594.1221 284.4775 C
594.084 284.5947 594.0449 284.709 594.0068 284.8359 c
593.4199 286.7305 592.833 289.499 592.833 292.9717 c
592.833 297.0815 593.6563 302.1826 596.2949 308.0024 c
599.3662 314.7935 600.6465 320.769 600.6465 325.7759 c
600.6338 336.4146 594.7891 342.771 588.1504 342.7729 c
585.1826 342.7759 582.1221 341.4883 579.4785 338.8442 c
575.2783 334.6523 573.7441 329.5635 573.75 324.4741 c
573.7676 315.5591 578.3525 306.5591 581.5039 301.4126 C
579.5586 303.5557 576.9209 306.6582 574.2744 310.3848 c
569.1182 317.6357 564 327.2046 564.0098 336.3457 c
564.0098 337.6816 564.1201 339.0054 564.3516 340.3154 C
564.6904 341.6743 565.9775 344.4893 570.2969 345.2378 c
575.6641 346.1685 580.0303 352.9668 574.376 354.8994 c
568.7227 356.8311 564.5996 345.1953 Y
564.5986 345.1748 L
563.3926 342.3101 562.8633 339.335 562.8633 336.3457 c
562.9043 322.376 574.0518 308.0454 580.0537 301.3193 C
574.4219 305.2988 568.7051 306.9688 563.332 306.9668 c
547.7119 306.917 535.1152 293.2324 535.0576 282.8389 c
535.0576 282.4805 535.0742 282.1279 535.1064 281.7783 C
535.1064 281.7773 L
535.5244 269.3945 543.4785 273.4043 v
550.2588 276.8223 538.8193 280.3281 538.9346 286.6426 c
539.0049 290.5039 539.7959 292.7529 540.6514 294.0967 C
541.668 295.4346 542.833 296.728 544.1387 297.9336 c
549.0684 302.4956 555.8652 305.8242 563.332 305.8213 c
570.1172 305.8174 577.4902 303.0928 584.6338 295.9551 c
586.3535 294.2324 587.8447 292.4766 589.1484 290.6953 C
589.8135 289.6182 590.4463 288.5322 591.0195 287.502 c
592.2109 285.3574 593.1582 283.459 593.6846 282.377 C
593.9189 281.8301 594.0859 281.5176 594.1348 281.4248 C
595.5068 277.6016 596.1318 273.7129 596.1328 269.8213 c
596.1514 253.1709 584.6279 236.3672 571.1816 224.9639 C
565.9395 221.3916 L
550.2178 213.5137 511.3604 211.6318 480.2939 211.668 c
455.7197 211.666 435.9727 211.9131 435.9277 211.9131 C
435.8652 210.7695 L
435.8926 210.7686 455.6953 210.5234 480.2939 210.5215 c
506.9844 210.5527 539.1934 211.7764 558.1406 217.2559 C
560.6377 217.9346 566.7334 217.5762 y
f
0 D
598.7461 302.752 m
599.5527 305.0889 602.1836 309.9624 606.3496 309.9624 c
606.376 309.9624 606.4033 309.9619 606.4297 309.9619 c
607.2148 309.9619 608.0713 309.8022 609.0137 309.4258 c
611.1992 308.5308 611.9482 306.8491 611.9756 304.5781 c
611.9893 300.8413 609.584 295.8467 607.6025 292.8076 c
605.7334 289.918 603.6836 286.6279 601.96 283.3984 C
602.0938 283.9434 602.2266 284.4844 602.3584 285.0176 C
605.6162 293.7988 606.4258 295 608.584 298.8633 C
610.9346 302.1563 608.9775 304.7236 608.083 305.376 c
607.1895 306.0283 604.4746 306.5527 602.2598 303.9897 C
599.9961 301.7266 599.5381 294.0811 598.4004 285.0771 C
597.8652 282.6572 597.5166 280.2529 597.292 278.0078 C
597.168 280.501 597.0605 283.5723 597.0605 286.7646 c
597.0557 292.7256 597.4463 299.1196 598.7461 302.752 c
f
595.3281 329.708 m
594.918 338.2554 577.2939 342.9941 578.2959 322.9814 c
578.8008 312.8633 582.6904 303.4199 586.4189 296.5444 C
586.0469 296.9858 585.6738 297.4072 585.3018 297.7837 C
585.04 298.1265 582.5781 301.4302 580.1035 306.2241 c
577.4883 311.2861 574.8896 317.9883 574.8955 324.4741 c
574.8994 329.3452 576.3281 334.0723 580.29 338.0342 c
582.7539 340.4985 585.5166 341.627 588.1504 341.6299 c
593.9766 341.6133 599.4785 336.0332 599.502 325.7759 c
599.502 320.9639 598.2695 315.146 595.252 308.4746 c
593.749 305.1606 592.8311 302.0703 592.2988 299.2393 C
593.127 309.6973 595.6494 322.9707 595.3281 329.708 c
f
647.4434 188.6309 m
653.4316 154.3555 663.1875 160.376 664.0469 160.7666 c
670.3447 163.6299 675.0879 181.4141 650.498 201.2256 c
647.5273 203.6191 644.3613 205.7295 641.0615 207.5908 C
669.3818 196.1836 674.4971 183.3525 674.5186 173.5557 c
674.5186 169.8916 673.79 166.6133 673.2207 163.9404 c
672.2568 159.2793 666.335 155.4375 660.376 155.4561 c
653.7559 155.5049 647.1191 159.9531 647.0615 173.3643 c
647.0645 191.5566 639.7275 202.415 634.3125 207.9512 C
640.9043 203.4297 645.9463 197.207 647.4434 188.6309 c
f
633.9004 229.2021 m
640.0469 233.7676 646.6289 235.6162 652.0996 235.6162 c
655.6914 235.6162 658.7998 234.8125 660.9648 233.501 c
663.1328 232.1758 664.3301 230.4063 664.3311 228.3721 c
664.2686 220.6777 659.7969 213.291 638.999 213.2012 c
632.124 213.1914 627.4209 214.0166 623.0967 215.1592 C
621.8281 215.5469 620.5586 215.9102 619.2861 216.251 c
617.9238 216.6621 616.5439 217.0908 615.0928 217.5186 C
643.5654 214.7217 661.4385 220.1855 659.9443 227.6563 c
658.4189 235.291 645.2344 232.6328 631.7959 223.7441 c
627.8379 221.126 619.5039 220.876 609.9951 221.3145 C
618.5684 222.3916 627.7178 224.6328 633.9004 229.2021 c
f
621.8711 189.9658 m
624.5273 179.8516 636.7568 173.5537 636.7568 186.5303 c
636.7568 199.5508 626.9883 209.168 613.7891 214.9844 C
614.0752 214.8857 614.3594 214.7939 614.6465 214.6895 c
625.5898 210.7168 637.043 203.167 639.6279 188.7197 c
640.0371 186.4307 640.2227 184.416 640.2227 182.6563 c
640.1582 174.752 636.6709 172.1318 632.6133 172.084 c
627.5176 172.0498 621.3994 176.6621 620.5264 182.1426 c
618.7646 192.3916 604.5596 209.8037 588.6914 216.3555 c
584.8994 217.9111 581.5449 218.7441 578.7168 219.1729 C
578.9248 219.1865 L
608.3584 215.4395 619.8799 197.5527 621.8711 189.9658 c
f
596.2891 235.5537 m
590.3135 232.1992 585.0977 229.459 580.293 227.6953 C
585.2217 229.9492 590.6152 232.6104 596.2891 235.5537 c
f
631.293 253.4365 m
656.7803 266.7051 686.6885 280.2256 715.3799 280.2363 c
727.1904 280.2334 744.1416 278.6123 757.7539 271.0479 c
771.1982 263.6055 778.2295 251.9326 778.2441 237.0859 c
778.2441 237.0693 778.2422 237.0225 778.2461 236.9521 C
778.2461 236.0488 778.2197 235.0674 778.1631 234.0791 c
777.8926 229.5635 776.6914 220.8281 771.7666 213.1592 c
767.6025 206.6621 759.4111 198.9307 743.5039 198.917 C
743.5039 198.915 L
743.4072 198.915 L
739.7559 198.915 735.791 199.3232 731.6289 200.1338 c
707.5566 204.7422 705.0771 219.1289 705.0254 225.3945 c
705.0234 225.4834 705.0234 225.5508 705.0254 225.5947 C
705.0439 233.0303 708.0244 239.5869 709.5488 241.9189 c
710.3301 243.0996 717.7139 253.5342 730.3672 253.5713 C
730.459 253.5713 L
730.4629 253.5732 L
735.0566 253.5537 739.7227 252.124 744.3564 249.2803 c
745.5352 248.5654 746.6289 247.7783 747.5996 246.9463 C
752.5547 243.1816 755.8506 235.1797 755.8408 226.6074 c
755.8213 220.8311 751.7002 218.332 747.7773 218.2998 c
745.5801 218.2959 743.5879 219.0605 742.3154 220.335 c
740.7002 221.957 739.9375 223.625 739.9355 225.3486 c
739.9355 225.417 739.9355 225.4609 739.9375 225.4727 C
740.0029 227.7783 741.3311 230.0762 744.3447 232.7568 c
745.4863 233.7656 746.0801 235.0947 746.0703 236.6309 C
746.0674 236.6309 L
746.0732 236.6641 L
746.0732 236.7129 L
745.9961 239.6211 744.2578 242.2031 743.5293 242.8613 C
742.8623 243.4004 742.1465 243.9111 741.3584 244.4023 c
737.6602 246.6709 733.957 247.8418 730.3721 247.8457 c
721.9951 247.8154 716.0225 241.332 714.333 238.7754 c
713.7041 237.8271 710.7666 232.1016 710.748 225.6855 C
710.75 225.6807 710.7451 225.624 710.7539 225.5391 C
710.8467 215.1738 718.2744 208.6025 732.7314 205.7539 c
736.5088 205.0215 740.0791 204.6416 743.3418 204.6416 c
754.1113 204.6465 761.9209 208.4707 766.9531 216.2598 c
771.3809 223.1387 772.2598 231.2207 772.4424 234.4023 c
772.4961 235.3135 772.5205 236.1289 772.5186 236.8945 c
772.5186 236.9229 772.5186 236.9434 772.5186 236.9473 C
772.5156 236.9473 L
772.5068 249.9092 766.6943 259.5088 754.9668 266.0449 c
745.1318 271.5215 731.1113 274.5078 715.4434 274.5107 c
687.7549 274.5029 658.707 261.2676 633.9395 248.3604 c
628.4463 245.5059 623.1006 242.627 617.9336 239.8428 c
605.3115 233.04 593.8184 226.874 583.8252 222.9648 C
582.1875 223.0264 580.6113 223.0586 579.1016 223.0557 C
593.8232 228.0273 612.4463 239.1221 633.1445 249.8828 c
658.9453 263.3301 687.8164 276.2383 715.3818 276.2246 c
729.8916 276.2324 744.7334 273.7129 755.8066 267.5439 c
766.8818 261.3457 774.21 251.7344 774.2383 236.9961 c
774.2422 236.1211 774.2129 235.2256 774.1611 234.3057 c
773.9141 230.0195 772.7422 222.0684 768.3955 215.3242 c
764.0273 208.5859 756.6641 202.9502 743.4053 202.9229 c
740.1113 202.9199 736.4531 203.2793 732.3936 204.0674 c
713.2285 207.9072 709.1299 217.2734 709.0342 225.6035 c
709.0088 232.2793 712.0205 238.4219 712.8984 239.7158 c
714.541 242.2295 721.0361 249.6113 730.376 249.5625 c
733.8789 249.5596 737.8457 248.5664 742.2627 245.8604 c
743.1592 245.3047 743.9404 244.7402 744.6396 244.1719 c
746.2275 242.8281 750.3691 235.8184 745.4863 231.4727 c
740.7754 227.2803 740.7646 224.3174 743.5322 221.5508 c
746.2998 218.7822 754.124 219.3535 754.124 226.6074 c
754.124 233.8594 751.4639 241.8623 746.5488 245.5859 C
746.5479 245.5859 L
745.6553 246.3584 744.6299 247.1055 743.4619 247.8145 c
738.7373 250.7139 734.3223 251.8555 730.376 251.8516 c
719.7607 251.8027 712.9121 243.8525 710.9902 240.9795 c
709.8584 239.2441 706.7686 232.9785 706.7441 225.6035 c
706.6494 216.3604 712.0967 205.584 731.9561 201.8203 c
736.1406 201.0068 739.9463 200.6328 743.4053 200.6328 c
743.4375 200.6328 743.4717 200.6328 743.5039 200.6328 c
757.3818 200.6318 765.6797 206.8115 770.3203 214.0859 c
774.9941 221.3672 776.1777 229.6533 776.4492 234.1729 c
776.502 235.1348 776.5293 236.0732 776.5293 236.9961 c
776.5615 252.5557 768.5273 263.1309 756.9209 269.5449 c
745.3154 275.9902 730.1523 278.5088 715.3818 278.5166 c
687.0986 278.502 657.9795 265.3877 632.0889 251.9121 c
607.4961 239.0781 585.7012 225.9287 570.8574 223.2061 C
571.1689 223.4609 571.4746 223.7246 571.7832 223.9873 C
572.6494 224.5771 L
572.917 224.6094 573.1885 224.667 573.457 224.707 C
573.458 224.7041 L
573.458 224.7061 L
573.4609 224.707 573.4619 224.707 573.4639 224.707 C
584.8213 226.4258 597.1621 235.1758 615.8574 245.2188 c
620.8486 247.9043 626.0039 250.6748 631.293 253.4365 c
f
*U
*u
1 D
596.8896 400.8042 m
593.2773 402.2388 589.5469 402.8369 585.8359 402.8369 c
572.2061 402.8145 558.834 394.8184 551.9854 389.9873 C
557.7246 395.2734 562.459 401.9517 565.2578 410.3999 C
565.2783 410.4785 565.4727 411.3379 565.4736 412.5972 c
565.4727 414.2925 565.1191 416.7476 563.3799 418.8013 c
561.6396 420.8628 558.5469 422.4146 553.3594 422.4092 c
549.3525 422.4126 546.5068 421.1611 544.6953 419.25 c
542.8857 417.3447 542.1299 414.8369 542.1299 412.4131 c
542.1465 408.5942 543.9453 404.8687 546.8613 403.7441 c
548.8906 402.9897 550.6602 402.5259 552.2666 402.5259 c
555.6182 402.498 557.999 404.6943 559.626 409.6309 c
560.3691 411.8613 561.1211 412.3267 561.3818 412.2744 C
561.7158 412.3389 562.4463 411.6387 562.9199 410.7651 c
563.2744 410.1543 563.5332 409.5396 563.6494 409.2441 C
558.3662 394.7783 547.0088 385.7959 534.9258 380.2056 C
534.877 380.1968 534.832 380.1895 534.7832 380.1807 C
534.7891 380.1431 L
533.2949 379.4556 531.791 378.8281 530.2871 378.2368 C
534.7266 380.9346 538.5693 384.1016 541.5508 387.0796 c
543.0908 388.6211 543.793 390.3745 543.79 392.0288 c
543.7881 395.4595 540.835 398.3232 536.9883 398.3311 c
533.8857 398.3311 530.2744 396.4702 527.1201 391.7949 c
522.2783 384.6157 513.7236 379.3979 506.3711 376.0122 c
503.2998 374.5962 500.4531 373.5 498.1738 372.7041 C
499.9365 374.5493 501.0059 377.0483 501.0146 379.4048 c
501.0508 382.2725 499.3066 385.0103 495.46 385.7788 c
495.1621 385.8428 494.8682 385.8716 494.582 385.8716 c
491.6523 385.8281 489.7012 382.9487 489.6865 380.3086 c
489.6787 378.9473 490.2412 377.562 491.541 376.7246 c
492.2051 376.293 492.9033 376.103 493.5566 376.103 c
495.3926 376.1338 496.8516 377.498 496.8965 379.002 c
496.915 379.7139 496.4561 380.3789 495.6963 380.7554 C
495.5537 380.8535 495.3945 380.9185 495.2188 380.9531 C
495.1992 380.959 495.1865 380.9697 495.166 380.9751 C
495.1621 380.9648 L
495.1016 380.9736 495.0459 381.0015 494.9805 381.0015 c
494.2686 381.0015 493.6924 380.4243 493.6924 379.7139 c
493.6924 379.002 494.2686 378.4253 494.9805 378.4253 c
495.2461 378.4253 495.4795 378.5249 495.6865 378.6636 C
495.5967 378.3994 495.4141 378.106 495.1348 377.8589 c
494.7314 377.498 494.167 377.2466 493.5566 377.2485 c
493.1201 377.2485 492.6553 377.3677 492.1641 377.6855 c
491.2295 378.2949 490.8379 379.2295 490.832 380.3086 c
490.8291 381.3525 491.2441 382.4932 491.9297 383.3379 c
492.6201 384.1875 493.5439 384.728 494.582 384.728 c
494.7881 384.7261 495.0039 384.7036 495.2256 384.6587 c
498.6191 383.9165 499.8359 381.8438 499.8682 379.4048 c
499.874 377.4961 499.0205 375.3755 497.6006 373.7642 c
496.5566 372.5796 495.2256 371.6797 493.7285 371.2832 c
493.6855 371.2705 493.6475 371.2607 493.6084 371.2495 C
493.1729 371.1426 492.7227 371.0869 492.2617 371.0718 C
491.6279 371.0718 L
491.6221 371.0723 491.6152 371.0718 491.6094 371.0723 C
491.6094 371.0718 L
418.1504 371.0718 L
418.1504 280.0313 L
411.269 253.8496 L
391.4946 310.8599 L
390.4136 310.4844 L
411.4175 249.916 L
419.2939 279.1836 L
419.2939 369.9277 L
491.5723 369.9277 L
491.7324 369.9194 491.8906 369.9121 492.0459 369.9121 c
492.125 369.9126 492.1992 369.9253 492.2764 369.9277 C
493.7217 369.9277 L
493.7305 369.9404 500.5684 369.9316 510.0898 371.5522 C
514.5068 372.5996 518.0879 373.1099 522.7139 374.0313 C
526.8525 375.2373 531.8418 376.3862 536.0459 377.8042 c
541.3086 379.5654 544.7373 380.4272 548.1191 380.4272 c
561.6719 380.4683 563.3672 374.3052 578.4053 374.2671 c
582.2129 374.2671 585.0684 375.332 586.9736 377.0391 c
588.876 378.7412 589.7949 381.0693 589.793 383.4536 c
589.791 388.1177 586.3457 393.0566 580.1729 394.6704 c
578.8838 395.0103 577.4629 395.1538 575.9473 395.1538 c
568.8877 395.1421 559.666 392.0142 553.0371 389.3296 C
554.8916 390.6201 557.1885 392.1157 559.8184 393.6138 c
566.9189 397.668 576.3975 401.6963 585.8359 401.6919 c
589.4258 401.6919 593.0059 401.1138 596.4688 399.7407 c
607.9238 395.167 610.8809 388.3511 610.9053 382.4502 c
610.9082 381.5039 610.8262 380.5801 610.6885 379.6914 C
610.6025 379.1948 L
610.5947 379.1572 610.5879 379.1196 610.582 379.0825 C
610.2119 378.1128 608.708 376.3135 602.6924 375.3672 c
593.4551 373.9126 592.0039 365.5386 598.3027 364.0112 c
604.6006 362.4844 609.665 372.9771 Y
609.666 372.9795 L
610.8721 375.2534 612.0361 378.6328 612.0508 382.4502 c
612.0762 388.769 608.6709 396.1626 596.8896 400.8042 c
f
0 D
561.3818 413.4189 m
560.1699 413.3662 559.3281 412.2886 558.542 409.9961 c
556.8779 405.2061 555.0371 403.6963 552.2666 403.6699 c
550.8877 403.668 549.2266 404.0835 547.2617 404.8164 c
545.0322 405.6069 543.2578 408.9385 543.2764 412.4131 c
543.332 416.7979 545.8418 421.2158 553.3594 421.2632 c
559.1758 421.2212 561.9033 419.3003 563.1895 417.0962 C
562.3311 418.0239 561.0322 418.7275 559.0859 418.9741 c
552.6572 419.7876 546.3945 412.5806 550.1162 408.8594 C
556.127 404.6602 557.1768 411.3398 v
557.9219 416.083 562.2305 416.3433 563.6084 411.8101 C
563.0879 412.5977 562.4238 413.3667 561.3818 413.4189 C
f
522.46 375.5708 m
519.5361 374.7173 516.6885 374.0229 513.9834 373.4624 C
514.9287 373.7676 515.875 374.0957 516.8184 374.4546 C
528.9912 378.3828 538.2646 388.6182 538.2656 389.4014 C
539.1104 390.5454 538.8379 392.0728 537.666 392.8096 c
536.4922 393.5454 534.9551 393.3599 534.2383 392.3911 C
534.2422 391.7646 526.7109 382.3984 515.4629 377.7329 C
511.0928 375.6807 506.5254 374.2144 502.6299 373.1533 C
510.7217 376.3975 522.0088 382.2222 528.0693 391.1538 c
531.0918 395.6191 534.3594 397.1846 536.9883 397.1846 c
540.2627 397.1802 542.6396 394.7729 542.6445 392.0288 c
542.6445 390.6968 542.0967 389.2549 540.7393 387.8896 c
536.2969 383.4404 529.875 378.5786 522.46 375.5708 C
f
574.3047 391.54 m
567.6973 392.1235 560.8076 390.7017 555.2402 388.9712 C
555.499 389.0708 555.7559 389.1709 556.0195 389.2715 c
562.2695 391.6509 570.0342 394.0146 575.9473 394.0098 c
577.3887 394.0098 578.7188 393.8711 579.8838 393.5645 c
585.5947 392.0684 588.6475 387.5542 588.6455 383.4536 c
588.6123 379.2827 585.5986 375.457 578.4053 375.4136 c
563.8564 375.3779 562.2031 381.5308 548.1191 381.5718 c
547.1934 381.5718 546.21 381.5425 545.1729 381.4849 C
555.9512 385.3765 575.2656 378.6587 580.0303 378.6587 c
585.0391 378.6587 588.9043 390.2524 574.3047 391.54 c
f
*U
*u
1 D
501.6426 359.813 m
442.6494 386.6284 411.9473 240.7285 Y
385.6118 312.4844 L
355.459 312.4844 L
394.0088 213.2471 L
401.9136 192.5547 400.2671 177.2109 V
400.272 177.5195 400.2866 177.8252 400.2832 178.1357 c
400.2661 192.5029 392.5107 208.9775 392.4937 209.0322 C
362.7407 281.8125 L
359.9419 287.8994 L
359.9297 287.8984 356.4268 296.9761 349.3149 310.4141 C
351.2471 311.707 L
349.5669 314.124 L
349.4077 314.3613 L
347.5298 317.1538 343.5322 322.9258 337.7705 330.3599 C
336.1553 332.9209 334.4531 335.5356 332.6587 338.1904 C
332.1465 339.459 331.5405 341.0693 330.9307 342.9482 c
329.3848 347.7188 327.8428 354.1631 327.8428 360.8223 c
327.8442 366.3657 328.915 372.0366 331.9014 377.0635 C
335.5908 381.9233 347.3857 381.436 343.293 385.5288 c
338.8555 389.9658 331.8345 379.0938 Y
331.8325 379.0864 L
328.0078 373.4937 326.6963 367.0273 326.6978 360.8223 c
326.7021 353.6929 328.4102 346.8789 330.0454 341.9805 C
306.2524 375.9712 268.001 414.6294 214.3428 421.3535 c
207.6455 422.188 201.4106 422.5791 195.6167 422.5791 c
191.6143 422.5796 187.8364 422.3794 184.2466 422.022 C
184.1807 422.0215 184.1094 422.019 184.0439 422.019 c
182.5996 422.019 181.2617 422.1216 179.9937 422.6943 c
177.3833 423.853 175.0415 427.1431 175.0674 430.1377 c
175.0674 430.8428 175.188 431.5288 175.4541 432.1802 c
176.2197 434.2041 179.7339 436.9214 181.8364 436.9976 C
182.1128 437.0171 182.3789 437.0264 182.6318 437.0264 c
186.2095 436.9839 187.415 435.4453 188.1211 433.5088 c
188.2471 433.1406 188.3052 432.7603 188.3071 432.373 c
188.3091 431.2256 187.7769 430.0127 186.9741 429.1084 c
186.8584 428.9771 186.7285 428.8706 186.6035 428.7544 C
186.6938 429.042 186.7563 429.3428 186.7563 429.6606 c
186.7563 431.3462 185.3892 432.7134 183.7031 432.7134 c
182.0161 432.7134 180.6494 431.3462 180.6494 429.6606 c
180.6494 428.1401 181.7642 426.8892 183.2188 426.6563 C
183.543 426.5576 183.8706 426.4932 184.1997 426.4961 c
186.9346 426.5547 189.4082 429.4102 189.4497 432.373 c
189.4497 432.874 189.376 433.3833 189.2065 433.8779 c
188.4834 436.1265 186.5986 438.2104 182.6318 438.1709 c
182.3535 438.1709 182.0615 438.1616 181.7632 438.1411 c
178.9731 437.9023 175.4868 435.1572 174.3926 432.6118 c
174.0659 431.8145 173.9194 430.9746 173.9194 430.1377 c
173.9448 426.5796 176.4795 423.0488 179.5205 421.6509 c
179.6582 421.5884 179.7974 421.5547 179.9346 421.502 C
177.9761 421.2183 176.0859 420.8784 174.2568 420.4902 C
168.7949 421.4199 160.2573 426.0093 156.3916 431.1519 c
153.2017 435.3018 145.9087 438.2124 139.6807 438.2334 c
136.9834 438.2334 134.4658 437.6772 132.5781 436.3291 c
130.6836 434.9863 129.4883 432.8076 129.5 429.8506 c
129.5 429.3423 129.5347 428.811 129.6045 428.2544 c
130.2559 422.9336 133.6479 419.6025 138.0615 417.7119 c
142.48 415.8052 147.9575 415.2275 153.1021 415.2251 c
155.1509 415.2256 157.1436 415.3208 158.998 415.4629 C
155.8428 413.9805 152.9688 412.3062 150.3813 410.4561 C
149.1279 410.5815 147.3047 410.7983 144.8345 411.1787 c
139.5122 411.9995 131.2529 413.5684 119.5308 416.5708 c
117.2681 417.1499 115.2036 417.4165 113.3315 417.4165 c
108.9956 417.4194 105.6929 415.98 103.5 413.7642 c
101.3076 411.5508 100.2314 408.5859 100.2314 405.5977 c
100.2314 402.4219 101.4429 399.1958 103.8354 396.7617 c
106.2202 394.3286 109.7871 392.7046 114.4048 392.7041 c
114.4121 392.7041 114.4175 392.7041 114.4248 392.7041 c
122.4067 392.709 130.4082 393.8667 137.3545 396.3672 C
136.0894 394.2334 135.0195 392.0293 134.1338 389.7725 C
131.8589 385.3984 127.3784 380.3799 124.0308 377.604 c
121.668 375.6294 117.6899 373.9355 114.1509 373.9448 c
111.543 373.9521 109.2314 374.8096 107.7397 377.0303 c
106.8662 378.335 106.4302 379.7241 106.4302 381.0059 c
106.4351 382.623 107.1016 384.0728 108.5366 385.1113 c
109.6157 385.895 110.8906 386.3213 112.1997 386.3213 c
113.3442 386.3184 114.5142 385.9971 115.6274 385.2842 c
116.8672 384.4897 117.5361 383.1309 117.5342 381.8491 c
117.5313 380.812 117.1147 379.8521 116.2266 379.2065 c
116.168 379.1636 116.0938 379.1299 116.0273 379.0913 C
116.3408 379.5713 116.5269 380.1426 116.5269 380.7588 c
116.5269 382.4443 115.1597 383.8115 113.4736 383.8115 c
111.7876 383.8115 110.4204 382.4443 110.4204 380.7588 c
110.4204 380.1064 110.6284 379.5049 110.9766 379.0088 C
111.585 377.9595 112.9893 377.5161 114.2485 377.5151 c
115.1924 377.5166 116.1499 377.7437 116.8979 378.2788 c
118.1079 379.1509 118.6846 380.502 118.6807 381.8491 c
118.6787 383.52 117.8271 385.228 116.2451 386.2461 c
114.957 387.0757 113.561 387.4648 112.1997 387.4648 c
110.6416 387.4648 109.1309 386.957 107.8652 386.041 c
106.1338 384.8018 105.2788 382.9463 105.2842 381.0059 c
105.2842 379.4634 105.8057 377.8623 106.7886 376.394 c
108.5151 373.8057 111.2798 372.7983 114.1108 372.7983 c
114.1245 372.7983 114.1377 372.7983 114.1509 372.7983 c
118.0459 372.8076 122.1709 374.5762 124.7622 376.7227 c
127.2207 378.7793 130.2158 381.9082 132.605 385.1973 C
131.375 380.7793 130.7852 376.2349 130.7866 371.7178 c
130.7993 350.7153 143.2734 330.1797 161.7485 325.7715 c
165.9805 324.772 170.0723 324.2954 173.9634 324.2954 c
184.4731 324.2954 193.5454 327.7788 199.9897 333.8135 c
206.4346 339.8452 210.2207 348.4219 210.2153 358.459 c
210.2153 365.3506 208.4404 372.9277 204.5557 380.8721 C
197.5977 399.8057 188.2476 393.3174 v
178.9126 386.8398 199.5464 386.522 204.1528 377.6406 C
207.1367 370.813 208.499 364.3467 208.499 358.459 c
208.4658 339.2832 194.2246 326.0576 173.9634 326.0142 c
170.2129 326.0122 166.2529 326.4727 162.1445 327.4424 c
152.2788 329.752 144.0815 337.1104 138.8262 346.7549 C
138.5527 347.7964 138.1523 349.4468 137.7446 351.6099 c
137.0298 355.4072 136.3149 360.6948 136.3149 366.626 c
136.3447 383.3184 141.8887 404.937 168.918 413.5376 c
179.5386 416.9102 190.4741 418.7964 202.0151 418.7988 c
222.5083 418.7964 244.9316 412.8267 270.8354 398.6289 C
292.1104 384.9917 309.4233 366.7334 322.8691 348.9248 c
323.8428 347.6353 324.7954 346.3486 325.728 345.0659 C
319.7163 352.021 312.7646 359.5122 305.021 366.937 c
271.5513 399.0273 238.9683 415.3994 208.1362 415.458 c
194.4409 415.4609 181.1333 412.0947 168.6055 405.4731 c
154.9756 398.2905 147.0933 386.2075 147.0981 372.3809 c
147.0981 372.353 147.1006 372.332 147.1006 372.3184 c
147.1123 356.8862 157.8428 340.8003 175.8228 340.7651 c
176.4893 340.7632 177.1655 340.7861 177.8765 340.8354 c
187.4922 341.6265 195.7783 351.5103 195.8486 362.0981 C
195.8467 362.145 195.8467 362.1587 Y
195.8535 369.2275 192.0337 375.3901 185.2261 379.4214 c
182.3271 381.1528 179.3315 382.0469 176.3208 382.0449 C
176.2974 382.0449 L
167.2109 381.9951 161.1191 374.1953 161.1025 366.8809 C
161.1001 366.8574 161.1025 366.8174 161.1025 366.7964 c
161.0952 361.6353 164.1533 357.1685 169.1753 354.9058 c
170.6558 354.2256 172.1787 353.876 173.7134 353.876 c
179.1743 353.9414 182.769 358.2803 183.562 362.5679 C
183.7544 363.25 183.8579 363.9502 183.8579 364.6323 c
183.8579 366.5552 183.1421 368.4199 181.8486 369.8794 C
181.8164 369.9194 L
181.7603 369.9805 L
181.3491 370.3984 L
181.293 370.4546 L
181.2251 370.5186 L
179.7534 371.8438 177.8672 372.5757 175.9146 372.5757 c
172.6421 372.5757 169.8291 370.5903 168.6113 367.7617 C
169.1084 371.1123 172.2798 374.606 176.3086 374.606 c
177.9263 374.606 179.6411 374.0903 181.4102 373.0356 c
186.1035 370.2012 188.3818 366.5786 188.4097 362.0913 C
188.4077 362.0703 188.4077 362.0391 188.4077 362.0278 c
188.4521 355.5684 182.6841 348.5181 177.3433 348.2607 c
176.8247 348.2251 176.3208 348.2061 175.8271 348.2061 c
162.5664 348.2139 154.5669 360.4463 154.5415 372.3481 c
154.562 383.3071 160.9053 392.9634 172.082 398.8931 c
183.5381 404.9478 195.668 408.0151 208.1973 408.019 c
228.6182 408.0298 248.4751 399.772 265.9849 388.5972 C
258.042 391.4741 251.2817 392.668 245.627 392.668 c
230.0674 392.6519 222.8877 383.5781 222.8638 376.0762 c
222.8638 373.564 223.6729 371.2231 225.2637 369.5068 c
226.8462 367.7915 229.2017 366.729 232.1563 366.729 c
232.1631 366.729 232.1694 366.729 232.1758 366.729 c
234.9927 366.7266 236.9517 367.4775 238.1997 368.6758 c
239.4448 369.873 239.9204 371.4678 239.918 372.9883 c
239.917 373.9023 239.7388 374.7886 239.4629 375.5996 C
239.0713 377.7319 237.2114 379.3491 234.9668 379.3491 c
232.4375 379.3491 230.3867 377.2983 230.3867 374.7686 c
230.3867 372.2397 232.4375 370.1885 234.9668 370.1885 c
236.5098 370.1885 237.8672 370.9575 238.6973 372.1265 C
238.3613 369.8921 236.8164 367.9336 232.1758 367.874 c
226.8174 367.9043 224.0488 371.5347 224.0088 376.0762 c
224.0156 382.8345 230.5107 391.5044 245.627 391.5225 c
252.2549 391.5225 260.5415 389.8291 270.6113 385.5381 C
282.6104 377.3496 293.377 367.96 302.2778 359.2124 c
315.2476 346.4888 325.7559 333.7466 332.2813 325.3052 c
338.4932 317.2754 342.3345 311.5781 343.3604 310.0293 C
344.9746 307.5835 L
345.4512 307.894 L
347.356 309.1304 L
347.8696 309.4639 L
348.4604 308.3491 349.0342 307.2549 349.5728 306.2061 c
355.4644 294.7305 358.3491 287.249 358.3589 287.2324 C
361.167 281.1279 L
390.9229 208.3418 L
390.9443 208.2949 392.8442 204.2402 394.7563 198.4141 c
396.6685 192.5928 398.5688 185.0225 398.5664 178.1357 c
398.5054 172.3027 397.2446 167.1055 393.564 163.6426 C
390.8906 161.7334 388.4248 160.584 386.2231 159.9453 C
385.1396 159.6953 383.9917 159.4932 382.7256 159.3818 C
382.7324 159.2988 L
377.8438 158.9189 374.9248 160.958 Y
383.9883 151.1309 397.4541 159.4219 V
386.1577 147.1719 372.6875 151.1328 368.2061 154.6602 c
363.1875 158.6396 360.6167 169.207 366.3477 173.0791 C
368.6592 174.9912 371.5806 174.3516 373.1606 172.1377 C
374.9341 170.3818 372.8623 167.6855 371.5537 167.5508 C
369.7651 167.4561 368.9736 169.3896 370.0381 170.1846 C
370.8052 171.0234 371.9048 170.0879 372.2466 170.2227 C
372.6592 169.915 372.771 172.9863 369.0576 172.498 C
365.3755 172.2959 364.3936 164.0029 370.77 162.7607 C
376.5518 161.3623 382.7681 168.7041 379.3647 175.3184 C
377.1333 181.4629 367.9014 184.5469 361.9697 180.7334 C
355.9585 177.7441 352.3774 170.7334 353.1348 164.1699 C
354.1528 157.6338 357.4785 153.0693 361.4326 149.9053 C
369.6489 143.7871 377.5757 145.3359 378.0518 145.2412 C
396.6367 146.4121 409.3647 170.8174 Y
409.3594 170.8145 L
411.4414 173.5322 413.5806 176.71 415.7646 180.4229 c
416.8735 182.3086 417.9458 184.2148 418.9995 186.1299 C
419.0449 184.6133 419.0742 182.9824 419.0747 181.2471 c
419.0742 181.2266 419.0747 181.2109 419.0718 181.2002 C
419.0718 181.1875 L
419.0767 166.085 417.0063 144.3047 407.248 126.3115 c
395.6831 105.0469 376.2437 94.2959 349.1582 94.2607 c
327.9946 94.2686 314.6572 106.4453 307.1416 116.709 c
298.0649 129.1299 292.6289 145.5068 292.2573 161.6045 C
294.6421 198.7559 328.1587 214.8662 344.6836 214.8555 c
345.2837 214.8584 345.8818 214.833 346.4604 214.7871 c
352.0146 214.3516 354.998 213.1152 356.5405 212.1191 C
354.4263 209.4014 353.251 206.0449 353.251 202.5527 c
353.2529 193.9492 360.25 186.9521 368.853 186.9521 c
377.4575 186.9521 384.4531 193.9492 384.4561 202.5527 c
384.4561 206.4014 383.0269 210.1045 380.438 212.9814 C
380.3413 213.0879 L
380.1953 213.2227 L
377.791 215.3154 L
377.7065 215.3838 L
377.6226 215.4482 L
367.0596 223.2754 356.2002 227.2676 345.3604 227.2676 C
345.3379 227.2666 345.3174 227.2646 345.2988 227.2627 C
338.5762 227.248 331.9526 225.7354 325.4536 222.7949 C
326.314 223.9521 326.8218 225.2139 326.8613 226.6709 c
326.8613 227.1201 326.8135 227.5801 326.7163 228.0537 c
325.5415 233.8848 321.4473 236.1553 316.7314 236.1064 c
308.9414 236.082 299.0757 230.5527 294.3271 226.5508 c
289.439 222.3691 284.2764 211.6611 281.0098 204.0127 C
281.0112 204.1123 281.0186 204.2207 281.0186 204.3184 c
281.0405 212.9814 277.6548 217.6689 273.3721 220.0215 c
269.1035 222.3809 264.0576 222.5039 260.6343 222.5078 c
260.1436 222.5078 259.6895 222.5039 259.2754 222.5039 c
253.5298 222.4473 248.9497 215.9619 248.9326 208.9727 c
248.9209 203.7813 251.5308 198.2207 258.1523 194.7832 c
268.8154 189.2236 272.5874 184.4824 273.8853 181.4863 C
273.7915 167.3926 272.4307 161.3105 272.6421 153.1865 C
267.5811 168.2432 256.397 189.9072 233.7861 190.0107 c
229.8765 190.0107 225.6343 189.3408 221.0483 187.8877 C
221.0063 187.8828 L
208.9253 184.8125 208.9253 180.5635 v
208.9253 177.2227 213.7241 171.207 220.5347 179.7559 c
225.0059 185.3672 226.061 187.167 229.3335 188.5713 C
230.8652 188.7637 232.3535 188.8662 233.7861 188.8662 c
250.4565 188.8721 260.7866 176.4844 267.0024 163.9229 c
269.522 158.8271 271.3369 153.7344 272.6152 149.4727 C
270.7529 153.7314 268.2988 158.5225 265.4399 163.0127 c
260.0239 171.457 253.3325 178.8467 246.4263 178.9082 c
244.7651 178.9102 243.106 178.4541 241.5142 177.4775 c
238.1646 175.4482 236.7568 172.8311 236.7715 170.1289 c
236.8916 161.1992 250.9224 151.6953 250.9321 151.6152 C
258.0068 147.5459 265.5068 139.3594 271.207 132.1934 c
274.0107 128.6709 276.3779 125.4063 278.0654 122.9883 C
278.689 121.7637 279.3198 120.5029 279.959 119.1982 C
281.4824 115.3252 283.3091 111.3262 285.4668 107.3506 C
285.4673 107.3496 L
298.5752 83.2051 323.9985 60.0059 369.1992 72.2168 c
418.9072 85.6475 428.6016 130.9561 428.5879 164.3115 C
429.4307 156.2637 430.6748 142.4307 430.9814 128.4756 C
430.4268 117.0537 427.7949 101.0684 418.8389 86.4893 c
417.6694 84.5898 417.1641 82.5352 417.1641 80.5176 c
417.2026 73.9248 422.4336 67.666 427.8584 67.6016 c
432.4434 67.626 436.5293 72.207 437.3262 83.8203 c
437.6514 88.4375 437.7998 93.96 437.7998 99.7607 c
437.7998 103.9238 437.7188 108.2236 437.5752 112.4404 C
446.7295 71.3154 461.7686 63.5547 470.8994 60.0449 c
473.708 58.957 476.3135 58.458 478.6865 58.458 c
488.835 58.4648 494.458 67.5156 494.4727 76.999 c
494.4844 85.7861 489.667 95.1777 479.1055 98.5283 c
460.542 104.4219 449.1787 117.2695 442.4404 128.6768 c
441.9648 129.4824 441.5176 130.2773 441.0889 131.0635 C
445.2139 124.6992 450.4199 119.7314 456.6855 119.6855 c
457.0537 119.6855 457.4268 119.7031 457.8047 119.7412 c
464.9844 120.3857 467.8877 123.8721 467.8477 127.8584 c
467.8057 132.8691 463.6943 138.4043 459.7471 140.6582 c
455.1855 143.2236 451.2588 146.0674 447.8604 149.0742 C
448.9277 148.7744 450.0039 148.6309 451.0635 148.6309 c
456.8105 148.6436 462.1074 152.7363 462.1484 157.8574 c
462.1445 158.249 462.1143 158.6465 462.0508 159.0439 c
461.5488 161.7979 458.8574 164.833 455.7363 164.8936 c
455.4883 164.8936 455.2314 164.875 454.9717 164.8242 c
453.1943 164.4883 451.0479 163.168 450.9258 160.9746 C
450.9258 160.9775 450.9219 160.9463 450.9219 160.8848 c
450.9287 159.334 452.1406 158.0029 453.6904 157.9893 c
453.8486 157.9883 454.0098 158.0059 454.1699 158.0361 C
454.21 158.0342 454.248 158.0244 454.29 158.0244 c
455.3965 158.0244 456.2939 158.9199 456.2939 160.0273 c
456.2939 161.1348 455.3965 162.0313 454.29 162.0313 c
453.1904 162.0313 452.2998 161.1465 452.2881 160.0508 C
452.1533 160.3008 452.0674 160.582 452.0664 160.8848 c
452.0664 160.8867 452.0664 160.8867 452.0684 160.9297 C
452.0586 162.2441 453.7266 163.4541 455.1846 163.6982 c
455.3662 163.7334 455.5469 163.748 455.7363 163.748 c
458.0391 163.8076 460.5859 161.0635 460.9209 158.8584 c
460.9756 158.5234 461.002 158.1865 461.002 157.8574 c
461.002 155.7266 459.8594 153.7119 458.0195 152.2168 c
456.1826 150.7227 453.6709 149.7754 451.0635 149.7773 c
449.1172 149.7773 447.1172 150.2979 445.2656 151.501 C
428.5352 168.0781 426.6611 188.7041 426.6523 197.1416 c
426.6523 198.1191 426.6787 198.9277 426.709 199.5459 C
426.8105 200.9951 L
426.6855 201.0068 L
442.9219 234.5742 452.8916 270.3721 458.8945 299.126 c
466.1465 333.8589 486.2813 358.4326 497.4922 349.5552 c
510.5371 339.2241 492.8623 328.9927 Y
513.2129 323.7676 514.2383 354.0879 501.6426 359.813 c
f
0 D
148.7881 409.2676 m
143.5684 408.7471 134.0693 408.2378 128.4551 410.5767 c
114.7139 416.3018 100.6875 404.8516 112.9966 399.126 c
121.7046 395.0762 132.2813 397.5083 140.2246 400.6348 C
139.5601 399.7598 138.9419 398.8647 138.3525 397.9585 C
131.2642 395.1577 122.8467 393.8428 114.4248 393.8486 c
105.7256 393.8672 101.4009 399.8169 101.3774 405.5977 c
101.4097 411.0298 105.1792 416.2407 113.3315 416.2705 c
115.0942 416.2705 117.0659 416.0195 119.2471 415.4619 c
134.8887 411.4556 144.4009 409.9868 149.0342 409.4502 C
148.9536 409.3892 148.8682 409.3301 148.7881 409.2676 C
f
151.3555 418.3057 m
157.8379 418.1489 163.0205 418.312 167.0845 418.6099 C
165.4556 418.0962 163.8872 417.5376 162.3784 416.936 C
159.7007 416.6265 156.4741 416.3701 153.1021 416.3716 c
148.0454 416.3691 142.6914 416.9556 138.5142 418.7646 c
134.3315 420.5884 131.3608 423.521 130.7407 428.396 c
130.6758 428.9087 130.6436 429.3936 130.6436 429.8506 c
130.6694 435.0859 134.5522 437.0293 139.6807 437.0898 c
145.5513 437.1108 152.6846 434.1807 155.4795 430.4604 c
158.4146 426.6392 163.4893 423.2119 168.2866 421.1606 C
163.4321 422.2505 157.4707 424.6162 151.334 429.5493 c
136.7344 441.2866 124.8721 418.9448 151.3555 418.3057 c
f
346.7324 310.0898 m
345.3047 309.1636 L
344.3154 310.6602 L
343.2759 312.228 339.4204 317.9487 333.188 326.0049 c
326.6382 334.4766 316.1016 347.2534 303.0806 360.0283 c
294.3301 368.6177 283.7866 377.8457 272.0205 385.9639 C
272.1001 386.1455 L
272.1001 386.1475 L
271.7876 386.2842 271.4824 386.4106 271.1733 386.543 C
252.4775 399.292 230.752 409.1533 208.1973 409.1646 c
195.4805 409.1621 183.1582 406.0415 171.5479 399.9048 c
160.0728 393.8364 153.4082 383.7715 153.3965 372.3481 c
153.3989 359.9956 161.7598 347.106 175.8271 347.061 c
176.3486 347.061 176.8789 347.0801 177.4165 347.1177 c
183.6226 347.5591 189.5088 354.96 189.5522 362.0278 c
189.5522 362.061 189.5522 362.061 Y
189.5488 367.0049 186.9297 371.0742 181.9971 374.0171 c
180.0913 375.1548 178.1719 375.7505 176.3066 375.7505 c
171.1768 375.7134 167.4238 371.1025 167.4004 366.8618 c
167.4058 365.8413 167.6167 364.8906 168.0347 364.0386 C
169.1211 364.3164 L
169.1162 364.4189 169.1133 364.5244 169.1133 364.6323 c
169.1211 368.3799 172.1646 371.4238 175.9146 371.4307 c
177.5781 371.4307 179.1929 370.8066 180.4551 369.6685 C
180.5039 369.6235 L
180.5371 369.5913 L
180.9336 369.1875 L
180.9644 369.1523 L
180.9878 369.1265 L
182.103 367.8662 182.7124 366.2705 182.7124 364.6323 c
182.7124 364.0645 182.6279 363.4736 182.4473 362.8257 C
181.7134 358.916 178.4961 355.0586 173.7061 355.0215 c
172.3521 355.0215 170.9985 355.3286 169.6514 355.9482 c
164.979 358.0693 162.2529 362.1006 162.2451 366.7964 c
162.2451 366.834 162.248 366.8452 Y
162.2544 373.5967 167.9238 380.8857 176.2988 380.8999 C
176.3208 380.8999 L
179.1011 380.8999 181.8892 380.0781 184.6396 378.4385 c
191.1719 374.5474 194.6968 368.7998 194.7017 362.1587 C
194.7041 362.1528 194.7017 362.1152 194.7061 362.0542 C
194.6763 352.0928 186.6621 342.6445 177.7915 341.9785 c
177.1108 341.9287 176.4639 341.9102 175.8228 341.9082 c
158.6216 341.915 148.2827 357.3535 148.2432 372.3438 c
148.2432 372.3696 148.2432 372.3809 Y
148.2471 385.7568 155.8154 397.4204 169.1396 404.46 c
181.5156 410.999 194.6289 414.313 208.1333 414.313 c
238.5435 414.2612 270.8774 398.0889 304.23 366.1108 c
315.748 355.0654 325.5215 343.8623 333.0234 334.5254 C
336.4517 329.3306 339.5356 324.3037 342.2622 319.5928 C
325.7646 342.4438 270.2822 412.4824 208.1504 412.5972 c
195.5713 412.5991 182.7261 409.6992 169.9424 402.9395 c
155.8848 395.5225 149.9482 383.5596 149.9624 372.3477 c
149.9878 357.4063 160.4546 343.6445 175.8228 343.6255 c
176.4258 343.6255 177.0356 343.6465 177.6543 343.6885 c
185.6719 344.3203 192.9434 352.9849 192.9883 362.1064 c
193.0044 367.502 190.3208 373.0654 183.7603 376.9644 c
181.1846 378.5029 178.6548 379.1855 176.3081 379.1826 c
169.1284 379.1548 163.9771 372.9531 163.9629 366.8667 c
163.9424 363.1909 165.938 359.5127 170.3667 357.5073 c
171.5186 356.979 172.6372 356.7354 173.6904 356.7354 c
177.6021 356.7769 180.2163 359.9692 180.7686 363.2056 C
180.9028 363.6606 180.9971 364.1333 180.9971 364.6313 c
180.9971 365.9214 180.5015 367.0854 179.709 367.9819 C
179.3057 368.3926 L
178.4043 369.2051 177.2236 369.7134 175.9146 369.7134 c
173.1079 369.7134 170.832 367.4385 170.832 364.6313 c
170.832 361.8247 173.1079 359.5493 175.9146 359.5493 c
176.2515 359.5493 176.5791 359.5859 176.8979 359.6479 C
176.0195 358.9106 174.9399 358.4541 173.6904 358.4521 c
172.9053 358.4521 172.0366 358.6328 171.0825 359.0669 c
167.2026 360.8701 165.7036 363.7861 165.6826 366.8667 c
165.6919 372.0171 170.1934 377.4565 176.3081 377.4658 c
178.3208 377.4658 180.5352 376.8896 182.8813 375.4883 c
188.9937 371.8198 191.2549 366.9385 191.271 362.1064 c
191.3179 353.8804 184.3677 345.8188 177.5347 345.4033 c
176.958 345.3638 176.3882 345.3447 175.8228 345.3447 c
161.5913 345.3706 151.6953 358.1523 151.6792 372.3477 c
151.6934 382.9619 157.2026 394.2485 170.7446 401.4219 c
183.2896 408.0527 195.833 410.877 208.1504 410.8799 c
244.4844 410.9004 278.9512 386.1328 304.2837 361.2549 c
316.9526 348.8237 327.3369 336.3843 334.5493 327.0562 c
341.7627 317.7295 345.7827 311.5444 345.7969 311.5303 C
346.5156 311.9971 L
346.7954 311.48 347.0571 310.9839 347.3276 310.4775 C
346.7324 310.0898 L
f
343.7524 320.457 m
345.8794 317.5073 347.4678 315.1938 348.4575 313.7222 C
348.6216 313.479 L
349.6396 312.0098 L
348.7729 311.4297 L
347.2563 314.27 345.583 317.2915 343.7524 320.457 C
f
436.1855 83.9014 m
435.3477 72.4141 431.4844 68.7197 427.8584 68.7461 c
425.6143 68.7383 423.208 70.1396 421.376 72.3477 c
419.5444 74.5518 418.3076 77.5264 418.3096 80.5176 c
418.3096 82.3438 418.7627 84.1787 419.814 85.8887 c
426.2783 96.4199 429.4834 107.6279 431.002 117.3789 C
430.7529 105.5615 429.5293 94.8008 426.4512 88.8203 c
419.0981 74.5322 433.8945 71.4551 433.1318 87.2939 c
432.7148 95.9443 433.7188 114.9473 434.0654 132.0693 C
434.6953 127.6133 435.3828 123.4424 436.1211 119.5371 C
436.4639 113.1963 436.6563 106.2979 436.6543 99.7607 c
436.6543 93.9795 436.5078 88.4795 436.1855 83.9014 c
f
478.7598 97.4355 m
488.7861 94.25 493.3184 85.4014 493.3291 76.999 c
493.3037 67.8994 488.0313 59.6211 478.6865 59.6045 c
476.4717 59.6045 474.0098 60.0674 471.3135 61.1123 c
462.0068 64.7539 446.1436 72.6201 437.248 119.835 C
437.1807 121.0596 437.1074 122.2607 437.0303 123.4385 C
442.7432 102.752 452.4941 80.3643 468.627 73.7451 c
490.9551 64.5859 488.2832 85.5762 483.3223 87.8662 c
480.7891 89.0361 444.0127 105.0215 435.6504 137.2041 C
435.5645 137.7578 435.4775 138.293 435.3877 138.79 c
435.1328 140.1035 434.9033 141.1846 434.6377 142.0449 C
434.583 142.3809 434.5352 142.7188 434.4873 143.0586 C
438.6904 131.0908 450.5293 106.4238 478.7598 97.4355 c
f
459.1846 139.6602 m
462.7695 137.6768 466.7393 132.2285 466.6992 127.8584 c
466.6602 124.4922 464.5996 121.6113 457.6924 120.8799 c
457.3545 120.8467 457.0195 120.833 456.6855 120.833 c
449.2021 120.7734 442.7334 129.2178 438.2783 138.4131 c
437.6367 139.7256 437.04 141.0498 436.4814 142.3652 c
440.2217 134.167 444.875 127.9775 450.4971 126.2246 c
465.1914 121.6455 462.5146 133.4785 457.6533 136.0537 c
442.6426 144.0068 434.6787 157.9268 430.5137 171.6533 C
435.0176 160.5654 443.4648 148.5088 459.1846 139.6602 c
f
284.0645 208.0664 m
287.2031 214.8945 291.3623 222.5537 295.0688 225.6768 c
299.6016 229.543 309.4668 234.9854 316.7314 234.96 c
321.1304 234.9121 324.4355 233.1611 325.5938 227.8193 c
325.6772 227.416 325.7178 227.0391 325.7178 226.6709 C
325.7891 224.5947 324.3799 222.8369 321.9814 221.0742 C
320.0078 220.0166 318.0459 218.8262 316.0977 217.499 C
313.7246 216.2061 311.0469 214.8174 308.1929 213.2256 c
302.8901 210.2256 297.0737 206.4297 291.7925 201.0439 C
294.0303 204.0322 296.0044 206.2744 297.062 207.332 c
300.3535 210.624 333.9893 229.8037 313.2354 229.8037 c
298.5938 229.8037 286.8857 212.083 281.2534 201.6387 C
282.0513 203.5576 283.001 205.7617 284.0645 208.0664 c
f
251.5444 152.5811 m
251.5454 152.582 248.1265 154.9648 244.7056 158.373 c
241.2529 161.79 237.8872 166.2637 237.9155 170.1289 c
237.9302 172.4307 239.0054 174.584 242.1123 176.502 c
243.5391 177.375 244.9707 177.7598 246.4263 177.7637 c
252.4526 177.8223 259.1675 170.7793 264.4746 162.3984 c
268.3735 156.2852 271.5615 149.5078 273.4092 144.4775 C
273.5483 143.5117 273.708 142.5029 273.8916 141.4414 C
268.7651 153.166 258.1196 174.0576 247.8247 172.6943 c
238.0928 171.4072 244.5332 162.2471 253.5503 156.0918 c
259.6836 151.9053 266.3794 144.2393 274.2397 130.1689 C
268.3228 137.915 259.7495 147.8369 251.5444 152.5811 C
f
266.146 218.21 m
250.9741 218.21 254.7622 204.7256 257.9868 200.6045 c
260.3877 197.5381 272.8877 192.0234 273.8296 183.9609 C
271.7529 187.124 267.4512 191.2422 258.6807 195.8008 c
252.4136 199.0752 250.0918 204.1514 250.0801 208.9727 c
250.0771 212.2305 251.167 215.3613 252.8755 217.6484 c
254.5859 219.9414 256.877 221.3633 259.2754 221.3613 c
259.6938 221.3613 260.1484 221.3633 260.6343 221.3633 c
264.022 221.3662 268.8804 221.207 272.8154 219.0215 c
276.7368 216.8262 279.8535 212.7041 279.875 204.3184 c
279.875 203.2441 279.8071 202.0811 279.6973 200.8633 C
279.5298 200.4521 279.3701 200.0557 279.2207 199.6836 C
278.3164 206.2188 275.3628 218.21 266.146 218.21 c
f
366.9092 84.5264 m
313.0923 70.5 286.7002 114.2793 280.2681 140.5703 C
278.5503 152.2412 278.7407 162.9619 280.1724 176.1299 c
280.7036 181.0205 282.7173 186.126 285.2061 190.7852 C
291.8027 201.5166 300.7993 207.7197 308.7559 212.2295 c
309.2432 212.5098 309.7251 212.7783 310.2041 213.043 C
305.418 209.0586 300.7153 204.2617 296.1152 198.6279 c
289.1465 190.0732 285.3486 177.5537 285.3472 163.3613 c
285.3486 162.9434 285.3618 162.5322 285.3711 162.127 C
285.3853 161.5039 L
285.7886 144.0078 291.6904 126.2236 301.5957 112.6572 c
313.4639 96.3906 330.3755 87.3896 349.144 87.3916 C
349.144 87.3936 349.1582 87.3916 Y
349.2295 87.3916 L
349.2529 87.3916 349.2773 87.3916 349.3008 87.3916 c
378.9067 87.3916 400.5396 99.4199 413.29 123.0381 c
419.0532 133.6895 422.2959 145.4316 424.0547 156.4854 C
421.7129 129.0479 409.6055 95.6553 366.9092 84.5264 c
f
412.2847 123.584 m
399.6816 100.3105 378.5737 88.5547 349.2295 88.5381 C
349.1582 88.5381 L
349.144 88.5381 L
330.7476 88.542 314.2124 97.3232 302.52 113.332 c
292.7642 126.6836 286.9248 144.2734 286.5293 161.5283 C
286.5146 162.1514 L
286.5054 162.5654 286.4927 162.9668 286.4927 163.3613 c
286.4902 177.3545 290.2515 189.624 297.0029 197.9043 c
303.4272 205.7666 310.0156 211.9668 316.7314 216.5459 C
319.0483 217.79 321.1021 218.96 322.7446 220.1875 C
330.1509 224.1172 337.6992 226.1133 345.3535 226.1201 C
345.4639 226.1201 L
345.4683 226.1211 L
355.9868 226.0938 366.5615 222.2168 376.9307 214.5352 C
376.9941 214.4873 L
377.0537 214.4395 L
379.439 212.3604 L
379.5391 212.2725 L
379.5898 212.2109 L
381.9893 209.5479 383.3101 206.1182 383.3101 202.5527 c
383.2959 194.584 376.8232 188.1104 368.853 188.0977 c
360.8838 188.1104 354.4111 194.584 354.3965 202.5527 c
354.3965 205.9854 355.6191 209.2734 357.8071 211.8643 C
358.189 212.3203 L
357.7236 212.6836 L
357.6563 212.7363 357.5957 212.7822 357.5356 212.8262 c
355.8809 214.0127 352.667 215.4502 346.5493 215.9287 c
345.9414 215.9775 345.3149 216.001 344.6836 216.001 c
327.5986 215.9912 293.624 199.582 291.1143 161.6309 C
291.4932 145.2412 296.9888 128.667 306.2168 116.0332 c
313.8325 105.6074 327.5171 93.1211 349.1582 93.1182 c
376.5371 93.1162 396.5254 104.1328 408.2539 125.7656 c
418.1323 143.999 420.2051 165.8721 420.2183 181.0723 C
420.2202 181.0771 L
420.2202 181.209 L
420.2202 183.7461 420.1602 186.0664 420.0723 188.1221 C
420.5977 189.0908 421.1294 190.0596 421.6455 191.0361 C
421.8071 188.3613 421.938 185.0273 421.938 181.21 c
421.9399 166.1338 419.8848 143.6172 409.7637 124.9453 c
399.6284 106.2803 381.5552 91.417 349.1606 91.3984 c
329.8965 91.4043 314.9873 101.1357 304.832 115.0195 c
295.0415 128.415 289.7466 145.6748 289.3916 161.6289 C
291.8374 200.1582 325.9824 217.7295 344.5938 217.7188 c
345.3135 217.7217 346.0117 217.6943 346.6836 217.6416 c
353.1025 217.1396 356.6318 215.5869 358.5381 214.2178 c
359.4917 213.5322 360.0449 212.8887 360.3569 212.4307 c
360.4229 212.335 360.4731 212.251 360.5186 212.1738 C
357.8247 209.8379 356.1143 206.3984 356.1143 202.5527 c
356.1143 195.5176 361.8174 189.8145 368.8525 189.8145 c
375.8877 189.8145 381.5913 195.5176 381.5913 202.5527 c
381.5913 205.8301 380.3438 208.8066 378.312 211.0645 C
375.9111 213.1543 L
364.978 221.251 354.6968 224.4014 345.355 224.3984 c
323.1753 224.3779 306.5137 206.8301 298.335 196.8174 c
291.48 188.4082 288.2119 176.3506 288.2119 163.3613 c
288.2119 162.8037 288.2334 162.2402 288.2461 161.6777 C
288.2427 161.6416 288.2383 161.6045 288.2363 161.5693 C
288.248 161.5674 L
288.6196 145.3906 293.9673 127.9521 303.9077 114.3438 c
314.209 100.2334 329.4907 90.249 349.1606 90.2539 c
349.1802 90.2539 349.2021 90.2539 349.2231 90.2539 c
381.9448 90.252 400.5249 105.4473 410.7725 124.3994 c
421.0361 143.3574 423.0811 166.0313 423.084 181.21 c
423.084 184.3027 422.9971 187.0811 422.8779 189.4561 C
423.5674 184.9326 424.3076 178.4922 424.4844 170.9795 C
423.5938 156.4668 420.543 138.8359 412.2847 123.584 c
f
*U
561.8672 278.0098 m
561.6133 278.0117 561.3486 277.9502 561.1123 277.8242 C
560.001 277.502 559.1816 276.4863 559.1816 275.2705 c
559.1816 273.7959 560.3779 272.5996 561.8535 272.5996 c
563.0391 272.5996 564.0332 273.3779 564.3809 274.4463 C
564.6875 273.7178 564.8984 272.8428 564.8984 271.7803 c
564.9004 269.1758 563.6904 265.5273 559.7949 260.9482 c
550.0146 249.3623 523.2188 246.6855 502.042 246.7188 c
487.9111 246.7188 476.3027 247.8525 473.7803 248.1143 C
473.7803 272.3135 L
502.9775 272.3135 L
502.9775 273.459 L
502.9775 273.4609 L
472.6348 273.4609 L
472.6348 247.0908 L
473.1426 247.0322 L
473.1553 247.0322 485.9883 245.5752 502.042 245.5752 c
523.3193 245.6113 550.2236 248.0439 560.667 260.208 c
564.6738 264.917 566.042 268.8105 566.0439 271.7803 c
566.0146 275.7031 563.7031 277.9502 561.8672 278.0098 c
f
*u
1 D
391.7051 516.6138 m
384.9683 519.6372 378.0894 520.8945 371.3218 520.8945 c
349.8574 520.8696 329.5112 508.3203 317.5654 499.2227 C
322.7939 505.1289 328.0239 511.1035 331.2178 513.917 c
344.8223 525.916 349.6377 536.8833 349.6377 545.7554 c
349.6377 551.1929 347.8267 555.8145 345.1821 559.3462 c
343.1284 562.0854 339.749 563.7422 336.1313 563.7456 c
332.436 563.75 328.4917 561.9922 325.5254 557.9409 c
322.5542 553.8867 320.5449 547.5757 320.542 538.4189 c
320.542 536.75 320.6104 534.9883 320.75 533.1255 c
320.8062 532.376 320.8345 531.6133 320.8345 530.8433 c
320.8364 524.0723 318.7432 516.7036 316.6396 511.0459 c
315.1484 507.0293 313.6646 503.8936 312.9263 502.4023 C
310.7056 498.6533 308.4072 495.1006 306.2354 491.916 C
307.3979 493.7847 308.3394 495.353 308.8657 496.2622 c
311.7197 501.2192 312.7705 503.998 314.041 507.5508 c
315.5806 511.8672 317.667 518.6387 317.6719 524.6904 c
317.6699 527.9766 317.0581 531.0776 315.3179 533.4453 c
313.4316 536.0078 310.4805 537.2134 307.4893 537.2085 c
305.1538 537.2085 302.7715 536.4854 300.7788 535.0991 c
298.1333 533.2656 296.8687 530.666 296.876 528.0283 c
296.876 525.3164 298.1782 522.5879 300.4946 520.4985 c
301.9067 519.2271 303.5229 518.6357 305.0742 518.6387 c
308.48 518.6387 311.4966 521.4316 311.7544 525.3765 c
311.7637 525.5181 311.7681 525.6577 311.7681 525.8018 c
311.7876 528.1558 310.4355 530.8613 307.561 530.9541 C
307.54 530.9561 307.4951 530.9561 307.4609 530.9561 c
305.3047 530.9238 303.2603 529.2979 303.1997 527.2886 c
303.1997 527.2217 303.2104 527.1543 303.2163 527.0864 C
303.2163 527.0845 L
303.2163 527.0757 303.2188 527.0674 303.2192 527.0586 c
303.2251 526.9917 303.2275 526.9243 303.2393 526.8574 C
303.2842 526.4668 303.438 526.1143 303.6738 525.8247 C
303.7056 525.7778 303.7305 525.7305 303.7646 525.6855 C
303.7798 525.6973 L
304.144 525.3184 304.6533 525.0806 305.2202 525.0806 c
306.3267 525.0806 307.2241 525.978 307.2241 527.0845 c
307.2241 528.1274 306.4248 528.9736 305.4067 529.0693 C
305.9854 529.5176 306.7354 529.8145 307.4609 529.8115 c
307.4814 529.8115 307.4951 529.8115 307.5059 529.8096 C
309.543 529.7793 310.6035 527.8262 310.6245 525.8018 c
310.6245 525.6885 310.6196 525.5688 310.6128 525.4468 c
310.3828 522.0547 307.8359 519.7827 305.0742 519.7827 c
303.811 519.7852 302.4878 520.25 301.2622 521.3506 c
299.1523 523.251 298.0171 525.6885 298.02 528.0283 c
298.0273 530.3052 299.0645 532.5034 301.4326 534.1572 c
303.2275 535.4087 305.3882 536.064 307.4893 536.064 c
310.1865 536.062 312.752 534.9961 314.397 532.7661 c
315.9253 530.6958 316.5273 527.8398 316.5259 524.6904 c
316.5298 518.8945 314.4878 512.1953 312.9609 507.9365 c
311.6938 504.3916 310.6958 501.7427 307.8726 496.8325 c
306.3218 494.1309 300.8979 485.3345 296.9136 480.1719 C
299.5479 484.6665 301.6357 489.7944 301.6558 494.7998 c
301.6558 495.041 301.6504 495.2822 301.6416 495.5234 c
301.2954 504.9624 296.252 508.9907 290.8652 508.9517 c
284.3711 508.9351 277.4351 503.3882 277.4048 495.8818 c
277.4307 487.2832 271.6211 457.9365 265.0874 447.5229 C
265.1294 447.4966 L
259.3667 439.0313 254.0698 428.0391 251.3364 422.0269 c
250.6484 420.6221 250.0146 419.1714 249.4224 417.6899 c
249.4048 417.6484 249.3936 417.6211 Y
249.396 417.625 L
240.5264 395.3672 242.0996 365.5459 242.0996 358.668 c
242.0996 351.5508 242.0996 308.7515 242.0996 277.376 C
241.0679 271.1621 236.6074 261.8809 220.208 256.3838 C
219.5356 256.3359 218.8799 256.3027 218.2466 256.3027 c
217.4058 256.3076 216.6025 256.3613 215.8267 256.4814 C
224.8682 259.1182 230.6113 263.0654 234.2334 266.9688 c
240.0776 273.2637 240.377 279.3604 240.3818 279.4434 C
240.3818 365.062 L
239.2378 365.062 L
239.2378 279.4688 L
239.2378 279.4932 239.1782 278.1064 238.416 275.9131 c
236.6313 270.833 231.1401 261.5811 213.6357 257.0752 C
212.0483 257.7031 210.5664 258.7871 209.1323 260.6357 c
207.7666 262.4092 207.1602 264.3936 207.1577 266.3496 c
207.1577 269.749 209.0171 273.0449 212.0352 274.7764 c
213.1133 275.3994 214.4165 275.6953 215.7852 275.6953 c
217.958 275.6973 220.2803 274.9424 222.0195 273.6885 c
223.7637 272.4297 224.8965 270.7188 224.8936 268.7871 c
224.8936 268.082 224.7446 267.334 224.4053 266.5439 c
223.1572 263.7041 221.3755 262.7979 219.5981 262.7822 c
218.2158 262.7773 216.8047 263.3867 215.7588 264.2773 c
215.5439 264.46 215.3579 264.6572 215.1792 264.8594 C
215.6489 264.6182 216.1743 264.4678 216.7393 264.4678 c
218.6362 264.4678 220.1743 266.0068 220.1743 267.9023 c
220.1743 269.7998 218.6362 271.3379 216.7393 271.3379 c
215.3291 271.3379 214.1201 270.4854 213.5913 269.2725 C
213.145 268.665 212.9199 267.9854 212.9272 267.291 c
212.9961 264.4131 216.1958 261.6807 219.5981 261.6357 c
221.8193 261.6191 224.1147 262.9336 225.4551 266.0908 c
225.854 267.0107 226.0381 267.9199 226.0381 268.7871 c
225.9727 273.6162 220.6089 276.8232 215.7852 276.8398 c
214.2563 276.8369 212.7529 276.5117 211.4614 275.7686 c
208.0825 273.8213 206.0156 270.165 206.0132 266.3496 c
206.0132 264.1553 206.7046 261.9092 208.2241 259.9355 c
209.3691 258.4365 210.6011 257.3887 211.8936 256.6543 C
210.9927 256.4492 210.0674 256.2529 209.1045 256.0723 C
206.6187 257.4785 204.6675 259.6787 203.6772 262.5166 c
202.9072 264.7383 202.7119 267.3535 203.3081 270.2969 c
204.3916 275.6436 208.1523 279.7715 212.9819 281.4473 c
214.9155 282.1172 217.0186 282.3936 219.1924 282.1963 c
222.7183 281.9043 227.791 278.8223 229.2656 274.4746 c
229.5625 273.6113 229.7251 272.7002 229.7227 271.7422 C
229.7061 271.7275 226.0718 268.4912 227.2139 266.3965 c
228.3594 264.2988 231.3906 266.6885 230.8696 271.7432 C
230.8657 271.7432 L
230.8696 272.834 230.6855 273.8779 230.3481 274.8516 c
228.6108 279.7588 223.2949 282.957 219.2969 283.3369 c
216.9575 283.5469 214.6899 283.252 212.6064 282.5293 c
207.3999 280.7236 203.3481 276.2705 202.1875 270.5264 c
201.5532 267.4043 201.7534 264.5713 202.5962 262.1406 c
203.5273 259.4551 205.2441 257.3066 207.4272 255.7803 C
203.7637 255.1719 199.6924 254.7451 195.1313 254.5664 C
195.0884 254.5615 193.5669 254.3994 190.9512 254.4014 c
182.5991 254.3975 163.3843 256.1006 148.8574 270.1211 C
144.125 274.9854 147.397 293.2686 140.1201 288.8447 c
132.8198 284.4063 144.1597 273.498 Y
144.1943 273.4727 L
159.335 255.2803 181.7095 253.2588 190.9512 253.2549 c
193.6157 253.2568 195.1978 253.4229 195.2139 253.4248 C
200.3481 253.6201 204.8828 254.1338 208.9219 254.873 C
209.5723 254.5322 210.2441 254.2246 210.9507 253.9844 C
201 252.0342 187.9492 251.2285 170.8188 252.3428 C
164.2983 253.7441 154.9126 256.9795 145.7036 264.458 c
133.7583 274.1143 124.6074 282.6465 116.5269 282.708 c
112.8633 282.7158 109.5068 280.8457 106.519 276.6563 c
104.5933 273.9775 103.7148 271.0654 103.7173 268.1621 c
103.769 256.9043 116.6021 245.9141 131.2876 245.8867 c
132.0698 245.8867 132.8584 245.918 133.6523 245.9795 c
141.9395 246.6582 149.5415 246.9473 155.9307 247.043 C
156.4209 247.0059 156.9072 246.9678 157.4033 246.9365 C
157.3916 246.9365 L
142.0708 243.9717 128.604 239.6357 V
128.1655 239.5313 127.729 239.4355 127.2964 239.374 c
121.6777 238.5391 116.2065 238.0928 110.4414 237.6748 c
108.1812 237.5137 105.689 237.2979 103.2041 237.2979 c
98.146 237.2979 93.2188 238.1943 90.2456 242.0342 c
89.3735 243.1602 88.9458 244.6377 88.9458 246.1602 c
88.96 249.6367 91.1187 253.0469 94.627 253.0537 c
95.1572 253.0537 95.7271 252.9795 96.3345 252.8096 c
98.5288 252.1943 100.1655 250.4297 100.1699 247.915 c
100.1699 247.6787 100.1563 247.4336 100.125 247.1768 c
99.8628 245.1465 98.4346 244.0625 96.9331 244.0537 c
96.5181 244.0557 96.0928 244.1436 95.6797 244.3232 C
96.4883 244.6475 97.0615 245.4336 97.0615 246.3584 c
97.0615 247.5703 96.0796 248.5537 94.8672 248.5537 c
93.6553 248.5537 92.6724 247.5703 92.6724 246.3584 c
92.6724 246.1621 92.7061 245.9766 92.7544 245.7959 C
92.688 245.7607 L
92.7485 245.6455 92.8174 245.5439 92.8823 245.4346 C
92.9663 245.2549 93.0762 245.0908 93.2041 244.9404 C
94.1987 243.583 95.5806 242.9033 96.9331 242.9092 c
99.0137 242.9004 100.957 244.4893 101.2622 247.04 c
101.2983 247.3379 101.3169 247.6318 101.3145 247.915 c
101.3213 250.9697 99.2495 253.209 96.6396 253.915 c
95.9399 254.1074 95.2681 254.1992 94.627 254.1992 c
90.2622 254.1768 87.8081 250.0391 87.8008 246.1602 c
87.8008 244.4297 88.2808 242.7002 89.3423 241.332 c
92.6821 237.0459 98.0493 236.1543 103.2041 236.1523 c
105.7529 236.1543 108.2759 236.374 110.5239 236.5342 c
114.7129 236.8359 118.7607 237.1602 122.8301 237.6338 C
122.499 237.5107 122.1675 237.3867 121.8433 237.2607 C
109.8687 234.1543 97.9985 233.332 87.9136 233.334 c
77.1802 233.332 68.4883 234.2393 63.7607 234.2422 c
54.8271 234.2285 49.6563 226.9492 49.6421 219.8242 c
49.6138 213.5508 53.7104 207.2744 62.5444 206.1924 c
63.502 206.0723 64.4893 206.0176 65.4995 206.0176 c
82.7749 206.0596 107.3828 222.5098 118.9741 231.3604 C
133.0771 238.1123 154.0186 246.2383 168.5313 246.5645 C
168.4185 246.5674 L
173.0601 246.5596 177.8848 246.7295 182.8442 247.123 C
183.9536 247.2617 185.8491 247.459 V
176.7891 244.5781 166.3335 240.5 155.6533 234.7725 c
128.189 220.0566 94.1836 191.1465 88.4961 137.335 c
87.9141 131.8672 87.6221 126.4834 87.6221 121.3281 C
87.6167 121.3203 87.6196 121.2891 87.6196 121.2861 c
87.6123 84.7695 102.2451 63.4688 114.542 52.0781 c
128.3604 39.2598 147.2144 31.6094 165.0518 31.5996 C
165.0557 31.6016 L
165.0586 31.5996 L
165.0586 31.6016 L
177.9688 31.6299 188.0962 35.6074 192.7905 42.751 c
195.7373 47.3213 197.2495 51.9619 197.2495 56.5439 C
197.2495 56.5527 L
197.1943 68.2588 187.4004 76.1387 178.1934 76.1611 c
177.9385 76.1611 177.6831 76.1514 177.4312 76.1367 C
177.0552 76.1885 176.6851 76.2129 176.3022 76.21 c
169.2144 76.0605 160.8936 68.0342 160.751 58.6289 C
160.7446 58.5703 160.7554 58.5664 160.7485 58.5664 C
160.7461 54.2236 162.623 50.0703 166.1162 46.5889 c
168.3364 44.416 172.0786 43.1387 175.9995 43.1172 c
179.3193 43.1191 182.269 44.0898 184.4937 45.9424 c
186.3955 47.5156 188.647 50.5576 188.6396 55.8066 C
188.6396 55.8301 L
188.6396 60.6475 185.6372 63.5889 184.1001 65.1025 C
183.7983 65.3945 L
183.1099 66.0107 182.395 66.79 181.9795 67.3223 C
183.3003 66.7715 184.5591 65.9541 185.6128 64.9512 c
187.2725 63.3613 189.2344 60.6475 189.2393 56.5439 c
189.2393 53.5771 188.1855 50.4014 186.0479 47.0898 c
183.2939 42.6758 175.0459 39.5928 165.0586 39.6143 c
137.2031 39.7012 95.6792 61.3662 95.6353 121.333 C
95.6328 121.374 95.6353 121.3896 Y
95.6353 126.2334 95.9155 131.3125 96.4663 136.4902 c
100.7764 176.8906 121.9126 207.5166 159.4463 227.7031 c
174.1685 235.6104 188.5522 240.1738 198.0234 242.6094 c
203.3643 243.9805 207.7495 244.8359 210.4819 245.3135 c
212.9028 245.7354 214.4463 245.8984 215.0552 246.0039 c
217.3237 246.4102 219.749 246.5664 222.146 246.5645 c
226.3271 246.5664 230.4102 246.085 233.4473 245.6025 c
235.1909 245.3271 236.5732 245.0537 237.4536 244.8682 C
227.6807 242.1436 209.2153 236.3789 190.6772 227.2617 c
163.7666 214.0029 136.4507 193.6553 136.3735 164.7744 c
136.3735 151.1943 139.4849 141.9111 144.2837 135.9795 c
149.0654 130.0625 155.5127 127.6025 161.7891 127.6025 c
161.8042 127.6025 161.8188 127.6025 161.8345 127.6025 c
173.7695 127.6514 185.4653 136.1523 185.5879 146.5088 c
185.5879 147.5537 185.4531 148.6123 185.1914 149.6699 C
185.1934 149.6729 185.1953 149.6729 185.1987 149.6748 C
185.1968 149.6777 185.1963 149.6777 V
185.1558 149.9707 L
184.9834 150.9395 181.3369 164.1055 169.6992 164.2021 c
166.0303 164.2021 161.6899 162.7373 156.5972 158.9863 c
153.8452 156.9756 152.6411 154.4502 152.6484 151.9434 c
152.7109 145.8252 159.3853 140.0342 165.7227 139.9912 c
165.729 139.9912 165.7373 139.9912 165.7446 139.9912 c
167.7744 139.9912 169.7842 140.6201 171.4766 142.0586 c
175.8643 145.8779 178.0288 149.7979 180.1826 149.6465 C
180.9473 149.6504 181.9092 149.2324 183.1758 148.0625 C
183.2524 147.542 183.2988 147.0225 183.2988 146.5088 c
183.3052 142.2783 180.7583 138.1221 176.7285 135.0059 c
172.71 131.8945 167.2734 129.8877 161.8345 129.8936 c
150.5049 129.9717 138.7798 138.2588 138.665 164.7744 c
138.5884 192.0029 164.9365 212.0771 191.689 225.207 c
204.0576 231.2949 216.4419 235.8828 226.1694 239.0566 C
224.8286 238.1152 223.5952 237.0947 222.4976 236.0186 c
220.2896 233.8506 219.0103 230.8193 219.0059 227.8594 c
218.9912 224.5879 220.6396 221.3643 224.3257 219.7705 c
225.1299 219.418 225.9292 219.2549 226.6899 219.2549 c
226.6953 219.2549 226.7017 219.2549 226.7061 219.2549 c
230.2837 219.2871 232.8223 222.6631 232.835 225.8945 c
232.8462 227.7002 231.9912 229.5273 230.0674 230.5908 c
229.4067 230.9609 228.6323 231.1406 227.855 231.1406 c
226.3208 231.1455 224.6694 230.4229 224.0317 228.7998 c
223.9019 228.4619 223.8384 228.1182 223.8384 227.7842 c
223.8638 226.2041 225.1309 224.9824 226.5234 224.9541 c
227.3813 224.9375 228.2412 225.5313 228.6108 226.6025 C
228.5625 226.6191 L
228.6772 226.8467 228.748 227.0986 228.748 227.3701 c
228.748 228.2969 227.9966 229.0469 227.0708 229.0469 c
226.1455 229.0469 225.395 228.2969 225.395 227.3701 c
225.395 227.0352 225.4956 226.7246 225.666 226.4619 C
225.2852 226.7744 224.9844 227.2539 224.9844 227.7842 c
224.9844 227.9766 225.0176 228.1748 225.1006 228.3857 c
225.4956 229.4355 226.6401 229.9922 227.855 229.9941 c
228.4546 229.9961 229.0469 229.8525 229.5088 229.5918 c
231.0649 228.7129 231.6777 227.3643 231.6904 225.8945 c
231.6855 223.2246 229.478 220.4023 226.7061 220.3984 c
226.1025 220.3984 225.458 220.5244 224.7827 220.8193 c
221.519 222.2559 220.1665 224.9453 220.1519 227.8594 c
220.147 230.4854 221.3125 233.2568 223.3003 235.2002 c
225.4326 237.2949 228.124 239.1846 231.1216 240.625 C
234.8169 241.7598 237.9399 242.6406 240.2891 243.2715 C
241.0679 243.3496 241.8501 243.4004 242.6338 243.4004 C
348.2075 243.4004 L
348.2075 279.6611 L
276.4512 279.6611 L
276.4512 380.042 L
277.4766 434.0811 295.1538 429.2793 v
304.314 426.7905 296.2983 419.7368 Y
305.8931 414.3403 317.6729 441.4927 284.4663 443.0195 c
275.2129 443.4453 267.9688 440.8364 262.2915 436.3032 C
272.3311 449.9004 286.873 471.8354 305.2681 477.3711 c
308.6929 478.4019 313.9692 479.5078 319.6714 480.5327 C
328.958 480.4272 340.1221 480.0308 349.8706 480.0308 c
359.3062 480.0376 367.3564 480.3828 371.3013 481.7939 c
375.4175 483.311 379.1494 488.1108 379.1753 493.2061 c
379.1841 496.4883 377.5386 499.8647 373.4922 502.3135 c
369.4468 504.7725 363.041 506.376 353.3589 506.3784 c
333.3325 506.3726 318.835 497.9639 310.9053 491.8164 C
311.5913 492.5571 312.2974 493.334 313.0132 494.124 C
323.3311 502.7949 346.769 519.7666 371.3218 519.75 c
377.9487 519.75 384.6558 518.521 391.2354 515.5703 c
404.4253 509.6372 408.7104 500.9712 408.7241 493.4731 c
408.728 492.4414 408.6396 491.4351 408.4858 490.4575 C
407.1196 486.3574 399.5645 483.6611 393.4453 484.9106 c
387.3105 486.1621 379.1909 478.2432 386.9355 474.645 c
394.2646 471.2407 401.2256 476.7061 404.2275 479.626 C
404.7437 480.0933 405.2383 480.6128 405.7061 481.1885 c
405.7495 481.2397 405.7773 481.2744 Y
405.7881 481.2959 L
408.1934 484.3101 409.855 488.6675 409.8706 493.4731 c
409.8843 501.4321 405.2012 510.5815 391.7051 516.6138 c
f
0 D
60.0386 213.3438 m
67.7373 205.6455 96.4111 218.3115 106.4126 224.6514 c
107.9995 225.6563 110.2544 226.9375 112.9844 228.3643 C
100.3003 219.3682 79.8916 207.127 65.4995 207.1621 c
64.5313 207.1621 63.5923 207.2139 62.6865 207.3311 c
54.3765 208.3926 50.8164 214.0264 50.7876 219.8242 c
50.8047 226.4385 55.5269 233.0957 63.7607 233.0957 c
68.3677 233.0996 77.1279 232.1875 87.9136 232.1875 c
96.3779 232.1875 106.1113 232.7705 116.1309 234.7793 C
105.1733 229.3779 85.1172 228.752 73.207 229.6602 c
65.9897 230.21 47.2998 226.082 60.0386 213.3438 c
f
162.6626 252.9902 m
141.1934 256.1387 123.3022 274.0303 v
115.2866 282.0459 101.9756 266.7305 120.2964 255.5674 c
125.3169 252.5078 134.8784 249.5938 147.2212 247.9482 C
142.9609 247.7754 138.3818 247.5156 133.5605 247.123 c
132.7993 247.0625 132.0415 247.0352 131.2876 247.0332 c
124.2251 247.0332 117.5947 249.7061 112.748 253.7012 c
107.8936 257.6934 104.856 262.9854 104.8628 268.1621 c
104.8628 270.8359 105.6592 273.4902 107.4492 275.9873 c
110.3335 279.9912 113.2715 281.5527 116.5269 281.5625 c
116.5537 281.5625 116.5796 281.5635 116.6069 281.5635 c
123.8491 281.5635 133.103 273.2549 144.9834 263.5684 c
151.8726 257.9766 158.8486 254.7158 164.707 252.8096 C
164.0288 252.8691 163.353 252.9258 162.6626 252.9902 C
f
210.8604 255.2559 m
211.7988 255.4551 212.7119 255.6621 213.5923 255.8848 C
214.5215 255.5576 215.4741 255.3486 216.4497 255.251 C
215.5034 254.9941 214.5103 254.7549 213.4941 254.5234 C
212.5776 254.6748 211.7026 254.9355 210.8604 255.2559 C
f
222.146 247.7119 m
219.6982 247.709 217.21 247.5527 214.854 247.1328 c
214.3423 247.04 212.7231 246.8662 210.2861 246.4414 c
207.5293 245.9609 203.1162 245.0977 197.7383 243.7158 c
188.2046 241.2666 173.7383 236.6787 158.9053 228.7139 c
121.0938 208.4023 99.6504 177.3545 95.3281 136.6123 c
94.7729 131.3965 94.4907 126.2773 94.4907 121.3896 c
94.4907 121.3828 94.4878 121.3438 94.4927 121.2861 C
94.502 60.7539 136.6724 38.4961 165.0557 38.4688 c
175.2603 38.4873 183.7983 41.4795 187.0137 46.4727 c
189.2344 49.9141 190.3813 53.3018 190.3813 56.5439 c
190.3813 61.0332 188.208 64.0605 186.4028 65.7793 c
184.9419 67.1719 183.1411 68.2236 181.2666 68.7939 C
180.6865 68.9697 L
180.5439 68.3838 L
180.5015 68.207 180.4834 68.0566 180.4834 67.9336 c
180.4834 67.9316 180.4834 67.9297 180.4834 67.9277 C
180.6074 66.6982 181.9136 65.7061 183.0034 64.5703 C
183.3032 64.2822 L
184.8301 62.7754 187.4946 60.1367 187.4946 55.8301 C
187.4946 55.8066 L
187.4854 50.8926 185.4502 48.2441 183.7598 46.8242 c
181.771 45.1641 179.0991 44.2646 175.9995 44.2627 c
172.332 44.2695 168.8193 45.5215 166.9209 47.4014 c
163.623 50.6973 161.9111 54.5254 161.8931 58.5137 C
161.894 58.5264 L
161.896 58.54 161.896 58.5488 161.8955 58.5547 C
161.896 58.5869 L
161.9204 67.3291 170.0371 75.0322 176.3096 75.0674 c
176.6567 75.0654 176.9883 75.0459 177.3237 74.9951 C
177.3813 74.9873 L
177.4419 74.9912 L
177.6958 75.0078 177.9468 75.0166 178.1914 75.0166 c
186.7773 75.002 196.0781 67.5713 196.1069 56.5527 C
196.105 56.5439 L
196.105 52.2188 194.6816 47.7969 191.8311 43.373 c
187.4873 36.7188 177.7544 32.7656 165.0557 32.7441 C
165.0532 32.7441 L
147.541 32.7471 128.9214 40.293 115.3198 52.916 c
103.2202 64.1465 88.7754 85.0781 88.7651 121.2754 C
88.7661 121.2861 88.7651 121.2861 Y
88.7622 121.2861 L
88.7661 126.457 89.0576 131.792 89.6372 137.2139 c
95.2822 190.5566 128.9165 219.127 156.1943 233.7627 c
168.9956 240.6289 181.4766 245.1074 191.5923 247.9902 C
194.2515 248.209 197.3828 248.4229 200.7661 248.582 C
189.8354 246.0391 173.6543 241.1768 157.0088 232.2461 c
127.6113 216.4863 96.7192 187.8604 91.3428 137.0342 c
90.7607 131.5527 90.4829 126.3193 90.4829 121.3281 c
90.4731 89.79 101.583 67.9941 116.4868 54.1738 c
131.3887 40.3486 149.9951 34.4668 165.0532 34.46 c
176.5986 34.4844 186.1738 37.8701 190.3887 44.3066 c
193.1899 48.6475 194.3931 52.7979 194.3906 56.5439 c
194.3545 66.5742 185.9136 73.2813 178.1924 73.2998 c
177.8984 73.2998 177.5967 73.2813 177.2954 73.2578 C
176.9819 73.3154 176.6616 73.3496 176.3325 73.3496 c
171.0542 73.2773 163.6802 66.5938 163.6128 58.5889 c
163.6074 55.3105 164.9131 51.834 168.1265 48.626 c
169.7256 47.0508 172.8008 45.9912 175.9995 45.9766 c
178.354 45.9805 180.79 46.5801 182.665 48.1436 c
184.5439 49.7041 185.7837 52.2295 185.7793 55.8291 c
185.7793 59.1709 183.8662 61.3145 182.103 63.0498 c
180.3003 64.8008 178.7378 66.21 178.7686 67.9336 c
178.7686 68.7188 179.0649 69.668 179.8833 70.8623 C
182.5947 70.4619 185.3789 69.126 187.5894 67.0195 c
190.2637 64.4707 192.0991 60.8789 192.1016 56.5439 c
192.1016 53.293 191.0674 49.5889 188.4644 45.5508 c
185.0488 40.1699 176.1802 36.7305 165.0532 36.752 c
136.0503 36.8086 92.8018 59.3994 92.7754 121.3281 c
92.772 126.2354 93.0449 131.3848 93.6206 136.793 c
98.9316 186.7295 129.0986 214.6377 158.0933 230.2266 c
172.584 238.0088 186.7632 242.668 197.3105 245.3799 c
202.585 246.7344 206.9497 247.6035 209.9932 248.1328 c
212.1821 248.5137 213.6587 248.7129 214.3237 248.7969 C
219.8516 248.6904 225.3882 248.3047 230.2607 247.4512 C
231.4111 247.0586 L
228.6875 247.418 225.4536 247.71 222.146 247.7119 c
f
181.2993 62.2334 m
183.041 60.5117 184.6309 58.6934 184.6328 55.8291 c
184.5898 49.1904 180.3511 47.1885 175.9995 47.125 c
173.0708 47.1113 170.1675 48.1826 168.9365 49.4355 c
165.9067 52.4707 164.7607 55.6143 164.7583 58.5889 c
164.7539 62.2217 166.5073 65.6494 168.8613 68.1553 c
170.4722 69.8799 172.3677 71.1338 174.0991 71.7559 C
172.8345 70.8623 171.7607 69.6094 170.6782 68.1777 c
164.0942 59.4736 166.0522 47.0264 179.5996 51.2246 c
189.5522 54.3076 171.4775 63.9053 178.5503 70.9766 C
178.5498 70.9902 L
178.5659 70.9902 178.5825 70.9863 178.5991 70.9854 C
177.9292 69.876 177.625 68.873 177.623 67.9336 c
177.6543 65.4805 179.5962 63.9395 181.2993 62.2334 c
f
180.1826 150.793 m
176.834 150.6426 175.0425 146.5029 170.7358 142.9316 c
169.2524 141.6787 167.5303 141.1377 165.7227 141.1357 c
162.9033 141.1318 159.8862 142.4902 157.603 144.5449 c
155.3145 146.5996 153.7881 149.3242 153.792 151.9434 c
153.8027 154.084 154.7603 156.2031 157.2754 158.0645 c
162.2393 161.7197 166.3423 163.0586 169.6992 163.0586 c
174.9712 163.0586 178.5771 159.7393 180.9189 156.3184 c
181.5142 155.4473 182.0195 154.5752 182.4434 153.7598 C
178.4888 158.1963 170.1235 165.21 162.3047 156.4492 c
156.3652 149.7949 165.4692 144.5508 167.9824 145.8584 c
172.9116 148.4229 177.2979 156.0205 182.7466 149.8809 C
181.8516 150.4922 181.0151 150.792 180.1826 150.793 C
f
278.1079 459.0161 m
288.8447 474.7144 298.7085 492.3467 293.6904 498.2607 c
287.7744 505.2329 280.459 496.8647 280.459 484.8135 c
280.459 476.8135 274.0825 461.209 269.3311 453.7241 C
274.5586 466.9756 278.5288 488.4214 278.5493 495.8818 c
278.5493 499.2598 280.1377 502.2339 282.4878 504.3799 c
284.8354 506.5234 287.937 507.8096 290.8652 507.8066 c
295.6411 507.7651 300.0649 504.5493 300.4966 495.4775 c
300.5059 495.252 300.5103 495.0244 300.5103 494.7998 c
300.5435 486.7739 294.6094 478.0186 290.1631 472.5942 C
285.7627 468.1338 281.751 463.5161 278.1079 459.0161 C
f
353.3589 505.2344 m
362.9141 505.2358 369.1309 503.6318 372.8975 501.335 c
376.6606 499.0313 378.019 496.1074 378.0283 493.2061 c
378.0537 488.687 374.5229 484.1563 370.9126 482.8706 c
367.3364 481.564 359.248 481.1689 349.8706 481.1758 c
342.2021 481.1758 333.6392 481.4229 325.7944 481.5781 C
335.8354 483.21 345.6641 484.4316 348.0161 484.4316 c
352.2144 484.4316 374.7339 485.9585 373.0161 493.9736 c
371.2983 501.9893 348.0225 506.0513 324.1606 496.4551 c
318.0762 494.0073 312.3901 490.7715 307.084 487.0557 C
307.3711 487.3281 307.6753 487.6118 308.0181 487.9209 c
314.4121 493.688 330.1182 505.2358 353.3589 505.2344 c
f
312.2139 494.9463 m
311.9819 494.7515 311.7676 494.5684 311.5493 494.3828 C
319.1172 504.7749 328.7891 519.0542 331.5083 521.9316 c
349.9541 541.4487 343.8179 553.7065 339.0464 555.8062 c
334.2749 557.9053 323.207 557.5239 324.7334 536.1499 c
325.2241 529.2769 322.4063 520.8013 318.3662 512.4614 C
320.2568 517.9038 321.9731 524.564 321.9805 530.8433 c
321.978 531.6411 321.9497 532.4297 321.894 533.21 c
321.7539 535.0464 321.6885 536.7813 321.6885 538.4189 c
321.7256 556.4312 329.5122 562.5913 336.1313 562.5991 c
339.3984 562.6011 342.4448 561.0928 344.2651 558.6592 c
346.7739 555.3081 348.4917 550.936 348.4917 545.7554 c
348.4946 537.3154 343.9155 526.647 330.4619 514.7754 c
326.2261 511.0361 318.707 502.1313 312.2139 494.9463 C
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
